<?php
/**
 * InlineResponse2009
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Currencydatafeed.com API V2
 *
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success' => 'bool',
        'macd_data' => '\Swagger\Client\Model\InlineResponse2009MacdData[]',
        'rsi_data' => '\Swagger\Client\Model\InlineResponse2009RsiData[]',
        'technical_data' => '\Swagger\Client\Model\InlineResponse2009TechnicalData[]',
        'sembol' => 'string',
        'error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success' => null,
        'macd_data' => null,
        'rsi_data' => null,
        'technical_data' => null,
        'sembol' => null,
        'error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'macd_data' => 'macd_data',
        'rsi_data' => 'rsi_data',
        'technical_data' => 'technical_data',
        'sembol' => 'sembol',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'macd_data' => 'setMacdData',
        'rsi_data' => 'setRsiData',
        'technical_data' => 'setTechnicalData',
        'sembol' => 'setSembol',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'macd_data' => 'getMacdData',
        'rsi_data' => 'getRsiData',
        'technical_data' => 'getTechnicalData',
        'sembol' => 'getSembol',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['macd_data'] = isset($data['macd_data']) ? $data['macd_data'] : null;
        $this->container['rsi_data'] = isset($data['rsi_data']) ? $data['rsi_data'] : null;
        $this->container['technical_data'] = isset($data['technical_data']) ? $data['technical_data'] : null;
        $this->container['sembol'] = isset($data['sembol']) ? $data['sembol'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets macd_data
     *
     * @return \Swagger\Client\Model\InlineResponse2009MacdData[]
     */
    public function getMacdData()
    {
        return $this->container['macd_data'];
    }

    /**
     * Sets macd_data
     *
     * @param \Swagger\Client\Model\InlineResponse2009MacdData[] $macd_data macd_data
     *
     * @return $this
     */
    public function setMacdData($macd_data)
    {
        $this->container['macd_data'] = $macd_data;

        return $this;
    }

    /**
     * Gets rsi_data
     *
     * @return \Swagger\Client\Model\InlineResponse2009RsiData[]
     */
    public function getRsiData()
    {
        return $this->container['rsi_data'];
    }

    /**
     * Sets rsi_data
     *
     * @param \Swagger\Client\Model\InlineResponse2009RsiData[] $rsi_data rsi_data
     *
     * @return $this
     */
    public function setRsiData($rsi_data)
    {
        $this->container['rsi_data'] = $rsi_data;

        return $this;
    }

    /**
     * Gets technical_data
     *
     * @return \Swagger\Client\Model\InlineResponse2009TechnicalData[]
     */
    public function getTechnicalData()
    {
        return $this->container['technical_data'];
    }

    /**
     * Sets technical_data
     *
     * @param \Swagger\Client\Model\InlineResponse2009TechnicalData[] $technical_data technical_data
     *
     * @return $this
     */
    public function setTechnicalData($technical_data)
    {
        $this->container['technical_data'] = $technical_data;

        return $this;
    }

    /**
     * Gets sembol
     *
     * @return string
     */
    public function getSembol()
    {
        return $this->container['sembol'];
    }

    /**
     * Sets sembol
     *
     * @param string $sembol The symbol queried
     *
     * @return $this
     */
    public function setSembol($sembol)
    {
        $this->container['sembol'] = $sembol;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error Error message, if any
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
