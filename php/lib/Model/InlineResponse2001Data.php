<?php
/**
 * InlineResponse2001Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Currencydatafeed.com API V2
 *
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2001Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2001Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_1_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'symbol' => 'string',
        'last' => 'float',
        'change' => 'float',
        'change_percent' => 'float',
        'weekly_change' => 'float',
        'weekly_change_percent' => 'float',
        'monthly_change' => 'float',
        'monthly_change_percent' => 'float',
        'yearly_change' => 'float',
        'yearly_change_percent' => 'float',
        'ask' => 'float',
        'bid' => 'float',
        'daily_lowest' => 'float',
        'daily_highest' => 'float',
        'open_today' => 'float',
        'date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'symbol' => null,
        'last' => null,
        'change' => null,
        'change_percent' => null,
        'weekly_change' => null,
        'weekly_change_percent' => null,
        'monthly_change' => null,
        'monthly_change_percent' => null,
        'yearly_change' => null,
        'yearly_change_percent' => null,
        'ask' => null,
        'bid' => null,
        'daily_lowest' => null,
        'daily_highest' => null,
        'open_today' => null,
        'date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'last' => 'last',
        'change' => 'change',
        'change_percent' => 'change_percent',
        'weekly_change' => 'weekly_change',
        'weekly_change_percent' => 'weekly_change_percent',
        'monthly_change' => 'monthly_change',
        'monthly_change_percent' => 'monthly_change_percent',
        'yearly_change' => 'yearly_change',
        'yearly_change_percent' => 'yearly_change_percent',
        'ask' => 'ask',
        'bid' => 'bid',
        'daily_lowest' => 'daily_lowest',
        'daily_highest' => 'daily_highest',
        'open_today' => 'open_today',
        'date' => 'date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'last' => 'setLast',
        'change' => 'setChange',
        'change_percent' => 'setChangePercent',
        'weekly_change' => 'setWeeklyChange',
        'weekly_change_percent' => 'setWeeklyChangePercent',
        'monthly_change' => 'setMonthlyChange',
        'monthly_change_percent' => 'setMonthlyChangePercent',
        'yearly_change' => 'setYearlyChange',
        'yearly_change_percent' => 'setYearlyChangePercent',
        'ask' => 'setAsk',
        'bid' => 'setBid',
        'daily_lowest' => 'setDailyLowest',
        'daily_highest' => 'setDailyHighest',
        'open_today' => 'setOpenToday',
        'date' => 'setDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'last' => 'getLast',
        'change' => 'getChange',
        'change_percent' => 'getChangePercent',
        'weekly_change' => 'getWeeklyChange',
        'weekly_change_percent' => 'getWeeklyChangePercent',
        'monthly_change' => 'getMonthlyChange',
        'monthly_change_percent' => 'getMonthlyChangePercent',
        'yearly_change' => 'getYearlyChange',
        'yearly_change_percent' => 'getYearlyChangePercent',
        'ask' => 'getAsk',
        'bid' => 'getBid',
        'daily_lowest' => 'getDailyLowest',
        'daily_highest' => 'getDailyHighest',
        'open_today' => 'getOpenToday',
        'date' => 'getDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['change_percent'] = isset($data['change_percent']) ? $data['change_percent'] : null;
        $this->container['weekly_change'] = isset($data['weekly_change']) ? $data['weekly_change'] : null;
        $this->container['weekly_change_percent'] = isset($data['weekly_change_percent']) ? $data['weekly_change_percent'] : null;
        $this->container['monthly_change'] = isset($data['monthly_change']) ? $data['monthly_change'] : null;
        $this->container['monthly_change_percent'] = isset($data['monthly_change_percent']) ? $data['monthly_change_percent'] : null;
        $this->container['yearly_change'] = isset($data['yearly_change']) ? $data['yearly_change'] : null;
        $this->container['yearly_change_percent'] = isset($data['yearly_change_percent']) ? $data['yearly_change_percent'] : null;
        $this->container['ask'] = isset($data['ask']) ? $data['ask'] : null;
        $this->container['bid'] = isset($data['bid']) ? $data['bid'] : null;
        $this->container['daily_lowest'] = isset($data['daily_lowest']) ? $data['daily_lowest'] : null;
        $this->container['daily_highest'] = isset($data['daily_highest']) ? $data['daily_highest'] : null;
        $this->container['open_today'] = isset($data['open_today']) ? $data['open_today'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Pair symbol (e.g. \"EURUSD\", \"BTCUSD\")
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets last
     *
     * @return float
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param float $last Last trade price
     *
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets change
     *
     * @return float
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param float $change Absolute daily change
     *
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets change_percent
     *
     * @return float
     */
    public function getChangePercent()
    {
        return $this->container['change_percent'];
    }

    /**
     * Sets change_percent
     *
     * @param float $change_percent Daily change as a percent
     *
     * @return $this
     */
    public function setChangePercent($change_percent)
    {
        $this->container['change_percent'] = $change_percent;

        return $this;
    }

    /**
     * Gets weekly_change
     *
     * @return float
     */
    public function getWeeklyChange()
    {
        return $this->container['weekly_change'];
    }

    /**
     * Sets weekly_change
     *
     * @param float $weekly_change Absolute weekly change
     *
     * @return $this
     */
    public function setWeeklyChange($weekly_change)
    {
        $this->container['weekly_change'] = $weekly_change;

        return $this;
    }

    /**
     * Gets weekly_change_percent
     *
     * @return float
     */
    public function getWeeklyChangePercent()
    {
        return $this->container['weekly_change_percent'];
    }

    /**
     * Sets weekly_change_percent
     *
     * @param float $weekly_change_percent Weekly change as a percent
     *
     * @return $this
     */
    public function setWeeklyChangePercent($weekly_change_percent)
    {
        $this->container['weekly_change_percent'] = $weekly_change_percent;

        return $this;
    }

    /**
     * Gets monthly_change
     *
     * @return float
     */
    public function getMonthlyChange()
    {
        return $this->container['monthly_change'];
    }

    /**
     * Sets monthly_change
     *
     * @param float $monthly_change Absolute monthly change
     *
     * @return $this
     */
    public function setMonthlyChange($monthly_change)
    {
        $this->container['monthly_change'] = $monthly_change;

        return $this;
    }

    /**
     * Gets monthly_change_percent
     *
     * @return float
     */
    public function getMonthlyChangePercent()
    {
        return $this->container['monthly_change_percent'];
    }

    /**
     * Sets monthly_change_percent
     *
     * @param float $monthly_change_percent Monthly change as a percent
     *
     * @return $this
     */
    public function setMonthlyChangePercent($monthly_change_percent)
    {
        $this->container['monthly_change_percent'] = $monthly_change_percent;

        return $this;
    }

    /**
     * Gets yearly_change
     *
     * @return float
     */
    public function getYearlyChange()
    {
        return $this->container['yearly_change'];
    }

    /**
     * Sets yearly_change
     *
     * @param float $yearly_change Absolute yearly change
     *
     * @return $this
     */
    public function setYearlyChange($yearly_change)
    {
        $this->container['yearly_change'] = $yearly_change;

        return $this;
    }

    /**
     * Gets yearly_change_percent
     *
     * @return float
     */
    public function getYearlyChangePercent()
    {
        return $this->container['yearly_change_percent'];
    }

    /**
     * Sets yearly_change_percent
     *
     * @param float $yearly_change_percent Yearly change as a percent
     *
     * @return $this
     */
    public function setYearlyChangePercent($yearly_change_percent)
    {
        $this->container['yearly_change_percent'] = $yearly_change_percent;

        return $this;
    }

    /**
     * Gets ask
     *
     * @return float
     */
    public function getAsk()
    {
        return $this->container['ask'];
    }

    /**
     * Sets ask
     *
     * @param float $ask Ask price
     *
     * @return $this
     */
    public function setAsk($ask)
    {
        $this->container['ask'] = $ask;

        return $this;
    }

    /**
     * Gets bid
     *
     * @return float
     */
    public function getBid()
    {
        return $this->container['bid'];
    }

    /**
     * Sets bid
     *
     * @param float $bid Bid price
     *
     * @return $this
     */
    public function setBid($bid)
    {
        $this->container['bid'] = $bid;

        return $this;
    }

    /**
     * Gets daily_lowest
     *
     * @return float
     */
    public function getDailyLowest()
    {
        return $this->container['daily_lowest'];
    }

    /**
     * Sets daily_lowest
     *
     * @param float $daily_lowest Lowest price of the day
     *
     * @return $this
     */
    public function setDailyLowest($daily_lowest)
    {
        $this->container['daily_lowest'] = $daily_lowest;

        return $this;
    }

    /**
     * Gets daily_highest
     *
     * @return float
     */
    public function getDailyHighest()
    {
        return $this->container['daily_highest'];
    }

    /**
     * Sets daily_highest
     *
     * @param float $daily_highest Highest price of the day
     *
     * @return $this
     */
    public function setDailyHighest($daily_highest)
    {
        $this->container['daily_highest'] = $daily_highest;

        return $this;
    }

    /**
     * Gets open_today
     *
     * @return float
     */
    public function getOpenToday()
    {
        return $this->container['open_today'];
    }

    /**
     * Sets open_today
     *
     * @param float $open_today Open price of the day
     *
     * @return $this
     */
    public function setOpenToday($open_today)
    {
        $this->container['open_today'] = $open_today;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Time of the last update (\"YYYY-MM-DD HH:mm:ss\")
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
