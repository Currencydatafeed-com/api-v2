<?php
/**
 * InlineResponse2008Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Currencydatafeed.com API V2
 *
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2008Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'symbol' => 'string',
        'pivot' => 'float',
        'resistance1' => 'float',
        'support1' => 'float',
        'resistance2' => 'float',
        'support2' => 'float',
        'resistance3' => 'float',
        'support3' => 'float',
        'bollinger_upper' => 'float',
        'bollinger_lower' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'symbol' => null,
        'pivot' => null,
        'resistance1' => null,
        'support1' => null,
        'resistance2' => null,
        'support2' => null,
        'resistance3' => null,
        'support3' => null,
        'bollinger_upper' => null,
        'bollinger_lower' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'pivot' => 'pivot',
        'resistance1' => 'resistance1',
        'support1' => 'support1',
        'resistance2' => 'resistance2',
        'support2' => 'support2',
        'resistance3' => 'resistance3',
        'support3' => 'support3',
        'bollinger_upper' => 'bollinger_upper',
        'bollinger_lower' => 'bollinger_lower'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'pivot' => 'setPivot',
        'resistance1' => 'setResistance1',
        'support1' => 'setSupport1',
        'resistance2' => 'setResistance2',
        'support2' => 'setSupport2',
        'resistance3' => 'setResistance3',
        'support3' => 'setSupport3',
        'bollinger_upper' => 'setBollingerUpper',
        'bollinger_lower' => 'setBollingerLower'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'pivot' => 'getPivot',
        'resistance1' => 'getResistance1',
        'support1' => 'getSupport1',
        'resistance2' => 'getResistance2',
        'support2' => 'getSupport2',
        'resistance3' => 'getResistance3',
        'support3' => 'getSupport3',
        'bollinger_upper' => 'getBollingerUpper',
        'bollinger_lower' => 'getBollingerLower'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['pivot'] = isset($data['pivot']) ? $data['pivot'] : null;
        $this->container['resistance1'] = isset($data['resistance1']) ? $data['resistance1'] : null;
        $this->container['support1'] = isset($data['support1']) ? $data['support1'] : null;
        $this->container['resistance2'] = isset($data['resistance2']) ? $data['resistance2'] : null;
        $this->container['support2'] = isset($data['support2']) ? $data['support2'] : null;
        $this->container['resistance3'] = isset($data['resistance3']) ? $data['resistance3'] : null;
        $this->container['support3'] = isset($data['support3']) ? $data['support3'] : null;
        $this->container['bollinger_upper'] = isset($data['bollinger_upper']) ? $data['bollinger_upper'] : null;
        $this->container['bollinger_lower'] = isset($data['bollinger_lower']) ? $data['bollinger_lower'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol The queried symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets pivot
     *
     * @return float
     */
    public function getPivot()
    {
        return $this->container['pivot'];
    }

    /**
     * Sets pivot
     *
     * @param float $pivot Pivot point
     *
     * @return $this
     */
    public function setPivot($pivot)
    {
        $this->container['pivot'] = $pivot;

        return $this;
    }

    /**
     * Gets resistance1
     *
     * @return float
     */
    public function getResistance1()
    {
        return $this->container['resistance1'];
    }

    /**
     * Sets resistance1
     *
     * @param float $resistance1 First resistance level
     *
     * @return $this
     */
    public function setResistance1($resistance1)
    {
        $this->container['resistance1'] = $resistance1;

        return $this;
    }

    /**
     * Gets support1
     *
     * @return float
     */
    public function getSupport1()
    {
        return $this->container['support1'];
    }

    /**
     * Sets support1
     *
     * @param float $support1 First support level
     *
     * @return $this
     */
    public function setSupport1($support1)
    {
        $this->container['support1'] = $support1;

        return $this;
    }

    /**
     * Gets resistance2
     *
     * @return float
     */
    public function getResistance2()
    {
        return $this->container['resistance2'];
    }

    /**
     * Sets resistance2
     *
     * @param float $resistance2 Second resistance level
     *
     * @return $this
     */
    public function setResistance2($resistance2)
    {
        $this->container['resistance2'] = $resistance2;

        return $this;
    }

    /**
     * Gets support2
     *
     * @return float
     */
    public function getSupport2()
    {
        return $this->container['support2'];
    }

    /**
     * Sets support2
     *
     * @param float $support2 Second support level
     *
     * @return $this
     */
    public function setSupport2($support2)
    {
        $this->container['support2'] = $support2;

        return $this;
    }

    /**
     * Gets resistance3
     *
     * @return float
     */
    public function getResistance3()
    {
        return $this->container['resistance3'];
    }

    /**
     * Sets resistance3
     *
     * @param float $resistance3 Third resistance level
     *
     * @return $this
     */
    public function setResistance3($resistance3)
    {
        $this->container['resistance3'] = $resistance3;

        return $this;
    }

    /**
     * Gets support3
     *
     * @return float
     */
    public function getSupport3()
    {
        return $this->container['support3'];
    }

    /**
     * Sets support3
     *
     * @param float $support3 Third support level
     *
     * @return $this
     */
    public function setSupport3($support3)
    {
        $this->container['support3'] = $support3;

        return $this;
    }

    /**
     * Gets bollinger_upper
     *
     * @return float
     */
    public function getBollingerUpper()
    {
        return $this->container['bollinger_upper'];
    }

    /**
     * Sets bollinger_upper
     *
     * @param float $bollinger_upper Bollinger Bands upper value (if enough data)
     *
     * @return $this
     */
    public function setBollingerUpper($bollinger_upper)
    {
        $this->container['bollinger_upper'] = $bollinger_upper;

        return $this;
    }

    /**
     * Gets bollinger_lower
     *
     * @return float
     */
    public function getBollingerLower()
    {
        return $this->container['bollinger_lower'];
    }

    /**
     * Sets bollinger_lower
     *
     * @param float $bollinger_lower Bollinger Bands lower value (if enough data)
     *
     * @return $this
     */
    public function setBollingerLower($bollinger_lower)
    {
        $this->container['bollinger_lower'] = $bollinger_lower;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
