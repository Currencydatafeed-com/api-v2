<?php
/**
 * InlineResponse2009TechnicalData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Currencydatafeed.com API V2
 *
 * > ğŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.
 *
 * OpenAPI spec version: 2.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2009TechnicalData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009TechnicalData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_technical_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'sma_10' => 'float',
        'sma_20' => 'float',
        'sma_50' => 'float',
        'sma_100' => 'float',
        'sma_200' => 'float',
        'ema_12' => 'float',
        'ema_26' => 'float',
        'ema_50' => 'float',
        'stochastic_k' => 'float',
        'stochastic_d' => 'float',
        'adx' => 'float',
        'cci' => 'float',
        'williams_r' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date',
        'sma_10' => null,
        'sma_20' => null,
        'sma_50' => null,
        'sma_100' => null,
        'sma_200' => null,
        'ema_12' => null,
        'ema_26' => null,
        'ema_50' => null,
        'stochastic_k' => null,
        'stochastic_d' => null,
        'adx' => null,
        'cci' => null,
        'williams_r' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'sma_10' => 'sma_10',
        'sma_20' => 'sma_20',
        'sma_50' => 'sma_50',
        'sma_100' => 'sma_100',
        'sma_200' => 'sma_200',
        'ema_12' => 'ema_12',
        'ema_26' => 'ema_26',
        'ema_50' => 'ema_50',
        'stochastic_k' => 'stochastic_k',
        'stochastic_d' => 'stochastic_d',
        'adx' => 'adx',
        'cci' => 'cci',
        'williams_r' => 'williams_r'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'sma_10' => 'setSma10',
        'sma_20' => 'setSma20',
        'sma_50' => 'setSma50',
        'sma_100' => 'setSma100',
        'sma_200' => 'setSma200',
        'ema_12' => 'setEma12',
        'ema_26' => 'setEma26',
        'ema_50' => 'setEma50',
        'stochastic_k' => 'setStochasticK',
        'stochastic_d' => 'setStochasticD',
        'adx' => 'setAdx',
        'cci' => 'setCci',
        'williams_r' => 'setWilliamsR'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'sma_10' => 'getSma10',
        'sma_20' => 'getSma20',
        'sma_50' => 'getSma50',
        'sma_100' => 'getSma100',
        'sma_200' => 'getSma200',
        'ema_12' => 'getEma12',
        'ema_26' => 'getEma26',
        'ema_50' => 'getEma50',
        'stochastic_k' => 'getStochasticK',
        'stochastic_d' => 'getStochasticD',
        'adx' => 'getAdx',
        'cci' => 'getCci',
        'williams_r' => 'getWilliamsR'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['sma_10'] = isset($data['sma_10']) ? $data['sma_10'] : null;
        $this->container['sma_20'] = isset($data['sma_20']) ? $data['sma_20'] : null;
        $this->container['sma_50'] = isset($data['sma_50']) ? $data['sma_50'] : null;
        $this->container['sma_100'] = isset($data['sma_100']) ? $data['sma_100'] : null;
        $this->container['sma_200'] = isset($data['sma_200']) ? $data['sma_200'] : null;
        $this->container['ema_12'] = isset($data['ema_12']) ? $data['ema_12'] : null;
        $this->container['ema_26'] = isset($data['ema_26']) ? $data['ema_26'] : null;
        $this->container['ema_50'] = isset($data['ema_50']) ? $data['ema_50'] : null;
        $this->container['stochastic_k'] = isset($data['stochastic_k']) ? $data['stochastic_k'] : null;
        $this->container['stochastic_d'] = isset($data['stochastic_d']) ? $data['stochastic_d'] : null;
        $this->container['adx'] = isset($data['adx']) ? $data['adx'] : null;
        $this->container['cci'] = isset($data['cci']) ? $data['cci'] : null;
        $this->container['williams_r'] = isset($data['williams_r']) ? $data['williams_r'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets sma_10
     *
     * @return float
     */
    public function getSma10()
    {
        return $this->container['sma_10'];
    }

    /**
     * Sets sma_10
     *
     * @param float $sma_10 sma_10
     *
     * @return $this
     */
    public function setSma10($sma_10)
    {
        $this->container['sma_10'] = $sma_10;

        return $this;
    }

    /**
     * Gets sma_20
     *
     * @return float
     */
    public function getSma20()
    {
        return $this->container['sma_20'];
    }

    /**
     * Sets sma_20
     *
     * @param float $sma_20 sma_20
     *
     * @return $this
     */
    public function setSma20($sma_20)
    {
        $this->container['sma_20'] = $sma_20;

        return $this;
    }

    /**
     * Gets sma_50
     *
     * @return float
     */
    public function getSma50()
    {
        return $this->container['sma_50'];
    }

    /**
     * Sets sma_50
     *
     * @param float $sma_50 sma_50
     *
     * @return $this
     */
    public function setSma50($sma_50)
    {
        $this->container['sma_50'] = $sma_50;

        return $this;
    }

    /**
     * Gets sma_100
     *
     * @return float
     */
    public function getSma100()
    {
        return $this->container['sma_100'];
    }

    /**
     * Sets sma_100
     *
     * @param float $sma_100 sma_100
     *
     * @return $this
     */
    public function setSma100($sma_100)
    {
        $this->container['sma_100'] = $sma_100;

        return $this;
    }

    /**
     * Gets sma_200
     *
     * @return float
     */
    public function getSma200()
    {
        return $this->container['sma_200'];
    }

    /**
     * Sets sma_200
     *
     * @param float $sma_200 sma_200
     *
     * @return $this
     */
    public function setSma200($sma_200)
    {
        $this->container['sma_200'] = $sma_200;

        return $this;
    }

    /**
     * Gets ema_12
     *
     * @return float
     */
    public function getEma12()
    {
        return $this->container['ema_12'];
    }

    /**
     * Sets ema_12
     *
     * @param float $ema_12 ema_12
     *
     * @return $this
     */
    public function setEma12($ema_12)
    {
        $this->container['ema_12'] = $ema_12;

        return $this;
    }

    /**
     * Gets ema_26
     *
     * @return float
     */
    public function getEma26()
    {
        return $this->container['ema_26'];
    }

    /**
     * Sets ema_26
     *
     * @param float $ema_26 ema_26
     *
     * @return $this
     */
    public function setEma26($ema_26)
    {
        $this->container['ema_26'] = $ema_26;

        return $this;
    }

    /**
     * Gets ema_50
     *
     * @return float
     */
    public function getEma50()
    {
        return $this->container['ema_50'];
    }

    /**
     * Sets ema_50
     *
     * @param float $ema_50 ema_50
     *
     * @return $this
     */
    public function setEma50($ema_50)
    {
        $this->container['ema_50'] = $ema_50;

        return $this;
    }

    /**
     * Gets stochastic_k
     *
     * @return float
     */
    public function getStochasticK()
    {
        return $this->container['stochastic_k'];
    }

    /**
     * Sets stochastic_k
     *
     * @param float $stochastic_k stochastic_k
     *
     * @return $this
     */
    public function setStochasticK($stochastic_k)
    {
        $this->container['stochastic_k'] = $stochastic_k;

        return $this;
    }

    /**
     * Gets stochastic_d
     *
     * @return float
     */
    public function getStochasticD()
    {
        return $this->container['stochastic_d'];
    }

    /**
     * Sets stochastic_d
     *
     * @param float $stochastic_d stochastic_d
     *
     * @return $this
     */
    public function setStochasticD($stochastic_d)
    {
        $this->container['stochastic_d'] = $stochastic_d;

        return $this;
    }

    /**
     * Gets adx
     *
     * @return float
     */
    public function getAdx()
    {
        return $this->container['adx'];
    }

    /**
     * Sets adx
     *
     * @param float $adx adx
     *
     * @return $this
     */
    public function setAdx($adx)
    {
        $this->container['adx'] = $adx;

        return $this;
    }

    /**
     * Gets cci
     *
     * @return float
     */
    public function getCci()
    {
        return $this->container['cci'];
    }

    /**
     * Sets cci
     *
     * @param float $cci cci
     *
     * @return $this
     */
    public function setCci($cci)
    {
        $this->container['cci'] = $cci;

        return $this;
    }

    /**
     * Gets williams_r
     *
     * @return float
     */
    public function getWilliamsR()
    {
        return $this->container['williams_r'];
    }

    /**
     * Sets williams_r
     *
     * @param float $williams_r williams_r
     *
     * @return $this
     */
    public function setWilliamsR($williams_r)
    {
        $this->container['williams_r'] = $williams_r;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
