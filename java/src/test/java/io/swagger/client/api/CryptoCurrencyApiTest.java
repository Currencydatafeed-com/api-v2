/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse20018;
import io.swagger.client.model.InlineResponse20019;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CryptoCurrencyApi
 */
@Ignore
public class CryptoCurrencyApiTest {

    private final CryptoCurrencyApi api = new CryptoCurrencyApi();

    /**
     * Get extended historical close prices for a specific crypto pair on an exchange
     *
     * Returns the daily closing price history for a single cryptocurrency trading pair on a specific exchange (e.g. &#x60;LTCUSDT@binance&#x60;). Requires authentication and a subscription with historical access.  - &#x60;symbol&#x60; parameter accepts a single value, formatted as &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;). - &#x60;period&#x60; parameter is required, integer, maximum as supported (suggest up to 1825 for 5 years). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoExtendedHistoryTest() throws Exception {
        String symbol = null;
        Integer period = null;
        InlineResponse20015 response = api.getCryptoExtendedHistory(symbol, period);

        // TODO: test validations
    }
    /**
     * Get intraday (minute-level) price history for a specific crypto pair on an exchange
     *
     * Returns minute-level price history (close prices and timestamps) for a single crypto trading pair on a specific exchange.   The &#x60;symbol&#x60; parameter expects the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;).  - Requires authentication and subscription with historical access. - &#x60;hours&#x60; parameter: Maximum 48 (last 48 hours). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoExtendedMinuteHistoryTest() throws Exception {
        String symbol = null;
        Integer hours = null;
        InlineResponse20016 response = api.getCryptoExtendedMinuteHistory(symbol, hours);

        // TODO: test validations
    }
    /**
     * Get historical close prices for a cryptocurrency
     *
     * Returns the daily closing price history for a single cryptocurrency symbol for up to 5 years (max 1825 days). Requires authentication and a subscription with historical access.  The &#x60;symbol&#x60; parameter accepts a single cryptocurrency code (e.g., &#x60;XRP&#x60;, &#x60;BTC&#x60;, &#x60;ETH&#x60;). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoHistoryTest() throws Exception {
        String symbol = null;
        Integer period = null;
        InlineResponse20013 response = api.getCryptoHistory(symbol, period);

        // TODO: test validations
    }
    /**
     * Get live data for one or more cryptocurrencies
     *
     * Returns the latest price and daily metrics for one or more cryptocurrencies. Requires authentication and a subscription with crypto access. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoLiveTest() throws Exception {
        String symbol = null;
        InlineResponse20010 response = api.getCryptoLive(symbol);

        // TODO: test validations
    }
    /**
     * Get live crypto data for all pairs from a specific exchange
     *
     * Returns the latest live data for all cryptocurrency pairs from a specified exchange (market). Requires authentication and an appropriate subscription with on-chain access.  **The &#x60;exchange&#x60; parameter is required.**   For example: &#x60;binance&#x60;, &#x60;bybit&#x60;, etc. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoLiveByExchangeTest() throws Exception {
        String exchange = null;
        InlineResponse20012 response = api.getCryptoLiveByExchange(exchange);

        // TODO: test validations
    }
    /**
     * Get extended live data for one or more crypto pairs from specific exchanges
     *
     * Returns the latest extended data for one or more cryptocurrency pairs from specific exchanges or markets. Requires authentication and a subscription with crypto access.  The &#x60;symbol&#x60; parameter accepts one or more pair-market combinations, separated by commas. - Example: &#x60;BTCUSDT@binance,XRPUSDT@bybit&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoLiveExtendedTest() throws Exception {
        String symbol = null;
        InlineResponse20011 response = api.getCryptoLiveExtended(symbol);

        // TODO: test validations
    }
    /**
     * Get Crypto Market Fear &amp; Greed Index
     *
     * Returns the daily crypto market Fear &amp; Greed Index as a time series from 2021-04-10 to today. Authentication and on-chain access subscription required. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoMarketFearGreedIndexTest() throws Exception {
        InlineResponse20018 response = api.getCryptoMarketFearGreedIndex();

        // TODO: test validations
    }
    /**
     * Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)
     *
     * Returns the 1-minute interval closing price history for a single cryptocurrency symbol for up to 48 hours. Requires authentication and a subscription with historical access.  - &#x60;symbol&#x60; parameter accepts a single cryptocurrency code (e.g., &#x60;ETH&#x60;, &#x60;BTC&#x60;). - &#x60;hours&#x60; parameter is required, integer, max 48. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoMinuteHistoryTest() throws Exception {
        String symbol = null;
        Integer hours = null;
        InlineResponse20014 response = api.getCryptoMinuteHistory(symbol, hours);

        // TODO: test validations
    }
    /**
     * Get on-chain metrics for Bitcoin and crypto markets
     *
     * Returns daily on-chain indicators as time series for Bitcoin and major crypto assets.   The &#x60;type&#x60; parameter selects the indicator to retrieve (e.g. whale flows, SOPR, Puell Multiple, MVRV, open interest, leverage, funding, active address ratio).  **Available types:**   - whale   - sopr   - puell   - mvrv   - open_interest   - leverage   - funding   - active_address  Requires authentication and subscription with on-chain access. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoOnchainMetricsTest() throws Exception {
        String type = null;
        InlineResponse20017 response = api.getCryptoOnchainMetrics(type);

        // TODO: test validations
    }
    /**
     * Get performance of a single cryptocurrency over various periods
     *
     * Returns the percentage change in price for a specified cryptocurrency (e.g., BTC, ETH) over several timeframes, including 1d, 7d, 15d, 30d, 90d, 180d, 270d, 365d, and 720d.   Authentication and a subscription with crypto performance access are required. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCryptoPerformanceTest() throws Exception {
        String symbol = null;
        InlineResponse20019 response = api.getCryptoPerformance(symbol);

        // TODO: test validations
    }
}
