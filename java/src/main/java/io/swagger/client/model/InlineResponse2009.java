/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.InlineResponse2009MacdData;
import io.swagger.client.model.InlineResponse2009RsiData;
import io.swagger.client.model.InlineResponse2009TechnicalData;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * InlineResponse2009
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-06-16T10:33:10.614284809Z[GMT]")

public class InlineResponse2009 {
  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("macd_data")
  private List<InlineResponse2009MacdData> macdData = null;

  @SerializedName("rsi_data")
  private List<InlineResponse2009RsiData> rsiData = null;

  @SerializedName("technical_data")
  private List<InlineResponse2009TechnicalData> technicalData = null;

  @SerializedName("sembol")
  private String sembol = null;

  @SerializedName("error")
  private String error = null;

  public InlineResponse2009 success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @Schema(description = "")
  public Boolean isSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public InlineResponse2009 macdData(List<InlineResponse2009MacdData> macdData) {
    this.macdData = macdData;
    return this;
  }

  public InlineResponse2009 addMacdDataItem(InlineResponse2009MacdData macdDataItem) {
    if (this.macdData == null) {
      this.macdData = new ArrayList<InlineResponse2009MacdData>();
    }
    this.macdData.add(macdDataItem);
    return this;
  }

   /**
   * Get macdData
   * @return macdData
  **/
  @Schema(description = "")
  public List<InlineResponse2009MacdData> getMacdData() {
    return macdData;
  }

  public void setMacdData(List<InlineResponse2009MacdData> macdData) {
    this.macdData = macdData;
  }

  public InlineResponse2009 rsiData(List<InlineResponse2009RsiData> rsiData) {
    this.rsiData = rsiData;
    return this;
  }

  public InlineResponse2009 addRsiDataItem(InlineResponse2009RsiData rsiDataItem) {
    if (this.rsiData == null) {
      this.rsiData = new ArrayList<InlineResponse2009RsiData>();
    }
    this.rsiData.add(rsiDataItem);
    return this;
  }

   /**
   * Get rsiData
   * @return rsiData
  **/
  @Schema(description = "")
  public List<InlineResponse2009RsiData> getRsiData() {
    return rsiData;
  }

  public void setRsiData(List<InlineResponse2009RsiData> rsiData) {
    this.rsiData = rsiData;
  }

  public InlineResponse2009 technicalData(List<InlineResponse2009TechnicalData> technicalData) {
    this.technicalData = technicalData;
    return this;
  }

  public InlineResponse2009 addTechnicalDataItem(InlineResponse2009TechnicalData technicalDataItem) {
    if (this.technicalData == null) {
      this.technicalData = new ArrayList<InlineResponse2009TechnicalData>();
    }
    this.technicalData.add(technicalDataItem);
    return this;
  }

   /**
   * Get technicalData
   * @return technicalData
  **/
  @Schema(description = "")
  public List<InlineResponse2009TechnicalData> getTechnicalData() {
    return technicalData;
  }

  public void setTechnicalData(List<InlineResponse2009TechnicalData> technicalData) {
    this.technicalData = technicalData;
  }

  public InlineResponse2009 sembol(String sembol) {
    this.sembol = sembol;
    return this;
  }

   /**
   * The symbol queried
   * @return sembol
  **/
  @Schema(description = "The symbol queried")
  public String getSembol() {
    return sembol;
  }

  public void setSembol(String sembol) {
    this.sembol = sembol;
  }

  public InlineResponse2009 error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error message, if any
   * @return error
  **/
  @Schema(description = "Error message, if any")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2009 inlineResponse2009 = (InlineResponse2009) o;
    return Objects.equals(this.success, inlineResponse2009.success) &&
        Objects.equals(this.macdData, inlineResponse2009.macdData) &&
        Objects.equals(this.rsiData, inlineResponse2009.rsiData) &&
        Objects.equals(this.technicalData, inlineResponse2009.technicalData) &&
        Objects.equals(this.sembol, inlineResponse2009.sembol) &&
        Objects.equals(this.error, inlineResponse2009.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, macdData, rsiData, technicalData, sembol, error);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2009 {\n");
    
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    macdData: ").append(toIndentedString(macdData)).append("\n");
    sb.append("    rsiData: ").append(toIndentedString(rsiData)).append("\n");
    sb.append("    technicalData: ").append(toIndentedString(technicalData)).append("\n");
    sb.append("    sembol: ").append(toIndentedString(sembol)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
