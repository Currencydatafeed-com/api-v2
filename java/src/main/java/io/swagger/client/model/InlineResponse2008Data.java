/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * InlineResponse2008Data
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-06-16T10:33:10.614284809Z[GMT]")

public class InlineResponse2008Data {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("pivot")
  private BigDecimal pivot = null;

  @SerializedName("resistance1")
  private BigDecimal resistance1 = null;

  @SerializedName("support1")
  private BigDecimal support1 = null;

  @SerializedName("resistance2")
  private BigDecimal resistance2 = null;

  @SerializedName("support2")
  private BigDecimal support2 = null;

  @SerializedName("resistance3")
  private BigDecimal resistance3 = null;

  @SerializedName("support3")
  private BigDecimal support3 = null;

  @SerializedName("bollinger_upper")
  private BigDecimal bollingerUpper = null;

  @SerializedName("bollinger_lower")
  private BigDecimal bollingerLower = null;

  public InlineResponse2008Data symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * The queried symbol
   * @return symbol
  **/
  @Schema(description = "The queried symbol")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public InlineResponse2008Data pivot(BigDecimal pivot) {
    this.pivot = pivot;
    return this;
  }

   /**
   * Pivot point
   * @return pivot
  **/
  @Schema(description = "Pivot point")
  public BigDecimal getPivot() {
    return pivot;
  }

  public void setPivot(BigDecimal pivot) {
    this.pivot = pivot;
  }

  public InlineResponse2008Data resistance1(BigDecimal resistance1) {
    this.resistance1 = resistance1;
    return this;
  }

   /**
   * First resistance level
   * @return resistance1
  **/
  @Schema(description = "First resistance level")
  public BigDecimal getResistance1() {
    return resistance1;
  }

  public void setResistance1(BigDecimal resistance1) {
    this.resistance1 = resistance1;
  }

  public InlineResponse2008Data support1(BigDecimal support1) {
    this.support1 = support1;
    return this;
  }

   /**
   * First support level
   * @return support1
  **/
  @Schema(description = "First support level")
  public BigDecimal getSupport1() {
    return support1;
  }

  public void setSupport1(BigDecimal support1) {
    this.support1 = support1;
  }

  public InlineResponse2008Data resistance2(BigDecimal resistance2) {
    this.resistance2 = resistance2;
    return this;
  }

   /**
   * Second resistance level
   * @return resistance2
  **/
  @Schema(description = "Second resistance level")
  public BigDecimal getResistance2() {
    return resistance2;
  }

  public void setResistance2(BigDecimal resistance2) {
    this.resistance2 = resistance2;
  }

  public InlineResponse2008Data support2(BigDecimal support2) {
    this.support2 = support2;
    return this;
  }

   /**
   * Second support level
   * @return support2
  **/
  @Schema(description = "Second support level")
  public BigDecimal getSupport2() {
    return support2;
  }

  public void setSupport2(BigDecimal support2) {
    this.support2 = support2;
  }

  public InlineResponse2008Data resistance3(BigDecimal resistance3) {
    this.resistance3 = resistance3;
    return this;
  }

   /**
   * Third resistance level
   * @return resistance3
  **/
  @Schema(description = "Third resistance level")
  public BigDecimal getResistance3() {
    return resistance3;
  }

  public void setResistance3(BigDecimal resistance3) {
    this.resistance3 = resistance3;
  }

  public InlineResponse2008Data support3(BigDecimal support3) {
    this.support3 = support3;
    return this;
  }

   /**
   * Third support level
   * @return support3
  **/
  @Schema(description = "Third support level")
  public BigDecimal getSupport3() {
    return support3;
  }

  public void setSupport3(BigDecimal support3) {
    this.support3 = support3;
  }

  public InlineResponse2008Data bollingerUpper(BigDecimal bollingerUpper) {
    this.bollingerUpper = bollingerUpper;
    return this;
  }

   /**
   * Bollinger Bands upper value (if enough data)
   * @return bollingerUpper
  **/
  @Schema(description = "Bollinger Bands upper value (if enough data)")
  public BigDecimal getBollingerUpper() {
    return bollingerUpper;
  }

  public void setBollingerUpper(BigDecimal bollingerUpper) {
    this.bollingerUpper = bollingerUpper;
  }

  public InlineResponse2008Data bollingerLower(BigDecimal bollingerLower) {
    this.bollingerLower = bollingerLower;
    return this;
  }

   /**
   * Bollinger Bands lower value (if enough data)
   * @return bollingerLower
  **/
  @Schema(description = "Bollinger Bands lower value (if enough data)")
  public BigDecimal getBollingerLower() {
    return bollingerLower;
  }

  public void setBollingerLower(BigDecimal bollingerLower) {
    this.bollingerLower = bollingerLower;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2008Data inlineResponse2008Data = (InlineResponse2008Data) o;
    return Objects.equals(this.symbol, inlineResponse2008Data.symbol) &&
        Objects.equals(this.pivot, inlineResponse2008Data.pivot) &&
        Objects.equals(this.resistance1, inlineResponse2008Data.resistance1) &&
        Objects.equals(this.support1, inlineResponse2008Data.support1) &&
        Objects.equals(this.resistance2, inlineResponse2008Data.resistance2) &&
        Objects.equals(this.support2, inlineResponse2008Data.support2) &&
        Objects.equals(this.resistance3, inlineResponse2008Data.resistance3) &&
        Objects.equals(this.support3, inlineResponse2008Data.support3) &&
        Objects.equals(this.bollingerUpper, inlineResponse2008Data.bollingerUpper) &&
        Objects.equals(this.bollingerLower, inlineResponse2008Data.bollingerLower);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, pivot, resistance1, support1, resistance2, support2, resistance3, support3, bollingerUpper, bollingerLower);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2008Data {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    pivot: ").append(toIndentedString(pivot)).append("\n");
    sb.append("    resistance1: ").append(toIndentedString(resistance1)).append("\n");
    sb.append("    support1: ").append(toIndentedString(support1)).append("\n");
    sb.append("    resistance2: ").append(toIndentedString(resistance2)).append("\n");
    sb.append("    support2: ").append(toIndentedString(support2)).append("\n");
    sb.append("    resistance3: ").append(toIndentedString(resistance3)).append("\n");
    sb.append("    support3: ").append(toIndentedString(support3)).append("\n");
    sb.append("    bollingerUpper: ").append(toIndentedString(bollingerUpper)).append("\n");
    sb.append("    bollingerLower: ").append(toIndentedString(bollingerLower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
