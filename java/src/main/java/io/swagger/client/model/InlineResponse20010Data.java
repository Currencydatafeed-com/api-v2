/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * InlineResponse20010Data
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-06-16T10:33:10.614284809Z[GMT]")

public class InlineResponse20010Data {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("last")
  private BigDecimal last = null;

  @SerializedName("daily_change_percentage")
  private BigDecimal dailyChangePercentage = null;

  @SerializedName("last_btc")
  private BigDecimal lastBtc = null;

  @SerializedName("low")
  private BigDecimal low = null;

  @SerializedName("high")
  private BigDecimal high = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  @SerializedName("source")
  private String source = null;

  public InlineResponse20010Data symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Cryptocurrency symbol (e.g. BTC, ETH)
   * @return symbol
  **/
  @Schema(description = "Cryptocurrency symbol (e.g. BTC, ETH)")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public InlineResponse20010Data last(BigDecimal last) {
    this.last = last;
    return this;
  }

   /**
   * Last trade price in USD
   * @return last
  **/
  @Schema(description = "Last trade price in USD")
  public BigDecimal getLast() {
    return last;
  }

  public void setLast(BigDecimal last) {
    this.last = last;
  }

  public InlineResponse20010Data dailyChangePercentage(BigDecimal dailyChangePercentage) {
    this.dailyChangePercentage = dailyChangePercentage;
    return this;
  }

   /**
   * 24h change percentage
   * @return dailyChangePercentage
  **/
  @Schema(description = "24h change percentage")
  public BigDecimal getDailyChangePercentage() {
    return dailyChangePercentage;
  }

  public void setDailyChangePercentage(BigDecimal dailyChangePercentage) {
    this.dailyChangePercentage = dailyChangePercentage;
  }

  public InlineResponse20010Data lastBtc(BigDecimal lastBtc) {
    this.lastBtc = lastBtc;
    return this;
  }

   /**
   * Price in BTC, if available
   * @return lastBtc
  **/
  @Schema(description = "Price in BTC, if available")
  public BigDecimal getLastBtc() {
    return lastBtc;
  }

  public void setLastBtc(BigDecimal lastBtc) {
    this.lastBtc = lastBtc;
  }

  public InlineResponse20010Data low(BigDecimal low) {
    this.low = low;
    return this;
  }

   /**
   * 24h low price
   * @return low
  **/
  @Schema(description = "24h low price")
  public BigDecimal getLow() {
    return low;
  }

  public void setLow(BigDecimal low) {
    this.low = low;
  }

  public InlineResponse20010Data high(BigDecimal high) {
    this.high = high;
    return this;
  }

   /**
   * 24h high price
   * @return high
  **/
  @Schema(description = "24h high price")
  public BigDecimal getHigh() {
    return high;
  }

  public void setHigh(BigDecimal high) {
    this.high = high;
  }

  public InlineResponse20010Data updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Time of the last update
   * @return updated
  **/
  @Schema(description = "Time of the last update")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }

  public InlineResponse20010Data source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Source table
   * @return source
  **/
  @Schema(description = "Source table")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20010Data inlineResponse20010Data = (InlineResponse20010Data) o;
    return Objects.equals(this.symbol, inlineResponse20010Data.symbol) &&
        Objects.equals(this.last, inlineResponse20010Data.last) &&
        Objects.equals(this.dailyChangePercentage, inlineResponse20010Data.dailyChangePercentage) &&
        Objects.equals(this.lastBtc, inlineResponse20010Data.lastBtc) &&
        Objects.equals(this.low, inlineResponse20010Data.low) &&
        Objects.equals(this.high, inlineResponse20010Data.high) &&
        Objects.equals(this.updated, inlineResponse20010Data.updated) &&
        Objects.equals(this.source, inlineResponse20010Data.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, last, dailyChangePercentage, lastBtc, low, high, updated, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20010Data {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    dailyChangePercentage: ").append(toIndentedString(dailyChangePercentage)).append("\n");
    sb.append("    lastBtc: ").append(toIndentedString(lastBtc)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
