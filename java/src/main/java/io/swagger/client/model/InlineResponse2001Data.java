/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * InlineResponse2001Data
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-06-16T10:33:10.614284809Z[GMT]")

public class InlineResponse2001Data {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("last")
  private BigDecimal last = null;

  @SerializedName("change")
  private BigDecimal change = null;

  @SerializedName("change_percent")
  private BigDecimal changePercent = null;

  @SerializedName("weekly_change")
  private BigDecimal weeklyChange = null;

  @SerializedName("weekly_change_percent")
  private BigDecimal weeklyChangePercent = null;

  @SerializedName("monthly_change")
  private BigDecimal monthlyChange = null;

  @SerializedName("monthly_change_percent")
  private BigDecimal monthlyChangePercent = null;

  @SerializedName("yearly_change")
  private BigDecimal yearlyChange = null;

  @SerializedName("yearly_change_percent")
  private BigDecimal yearlyChangePercent = null;

  @SerializedName("ask")
  private BigDecimal ask = null;

  @SerializedName("bid")
  private BigDecimal bid = null;

  @SerializedName("daily_lowest")
  private BigDecimal dailyLowest = null;

  @SerializedName("daily_highest")
  private BigDecimal dailyHighest = null;

  @SerializedName("open_today")
  private BigDecimal openToday = null;

  @SerializedName("date")
  private String date = null;

  public InlineResponse2001Data symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Pair symbol (e.g. \&quot;EURUSD\&quot;, \&quot;BTCUSD\&quot;)
   * @return symbol
  **/
  @Schema(description = "Pair symbol (e.g. \"EURUSD\", \"BTCUSD\")")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public InlineResponse2001Data last(BigDecimal last) {
    this.last = last;
    return this;
  }

   /**
   * Last trade price
   * @return last
  **/
  @Schema(description = "Last trade price")
  public BigDecimal getLast() {
    return last;
  }

  public void setLast(BigDecimal last) {
    this.last = last;
  }

  public InlineResponse2001Data change(BigDecimal change) {
    this.change = change;
    return this;
  }

   /**
   * Absolute daily change
   * @return change
  **/
  @Schema(description = "Absolute daily change")
  public BigDecimal getChange() {
    return change;
  }

  public void setChange(BigDecimal change) {
    this.change = change;
  }

  public InlineResponse2001Data changePercent(BigDecimal changePercent) {
    this.changePercent = changePercent;
    return this;
  }

   /**
   * Daily change as a percent
   * @return changePercent
  **/
  @Schema(description = "Daily change as a percent")
  public BigDecimal getChangePercent() {
    return changePercent;
  }

  public void setChangePercent(BigDecimal changePercent) {
    this.changePercent = changePercent;
  }

  public InlineResponse2001Data weeklyChange(BigDecimal weeklyChange) {
    this.weeklyChange = weeklyChange;
    return this;
  }

   /**
   * Absolute weekly change
   * @return weeklyChange
  **/
  @Schema(description = "Absolute weekly change")
  public BigDecimal getWeeklyChange() {
    return weeklyChange;
  }

  public void setWeeklyChange(BigDecimal weeklyChange) {
    this.weeklyChange = weeklyChange;
  }

  public InlineResponse2001Data weeklyChangePercent(BigDecimal weeklyChangePercent) {
    this.weeklyChangePercent = weeklyChangePercent;
    return this;
  }

   /**
   * Weekly change as a percent
   * @return weeklyChangePercent
  **/
  @Schema(description = "Weekly change as a percent")
  public BigDecimal getWeeklyChangePercent() {
    return weeklyChangePercent;
  }

  public void setWeeklyChangePercent(BigDecimal weeklyChangePercent) {
    this.weeklyChangePercent = weeklyChangePercent;
  }

  public InlineResponse2001Data monthlyChange(BigDecimal monthlyChange) {
    this.monthlyChange = monthlyChange;
    return this;
  }

   /**
   * Absolute monthly change
   * @return monthlyChange
  **/
  @Schema(description = "Absolute monthly change")
  public BigDecimal getMonthlyChange() {
    return monthlyChange;
  }

  public void setMonthlyChange(BigDecimal monthlyChange) {
    this.monthlyChange = monthlyChange;
  }

  public InlineResponse2001Data monthlyChangePercent(BigDecimal monthlyChangePercent) {
    this.monthlyChangePercent = monthlyChangePercent;
    return this;
  }

   /**
   * Monthly change as a percent
   * @return monthlyChangePercent
  **/
  @Schema(description = "Monthly change as a percent")
  public BigDecimal getMonthlyChangePercent() {
    return monthlyChangePercent;
  }

  public void setMonthlyChangePercent(BigDecimal monthlyChangePercent) {
    this.monthlyChangePercent = monthlyChangePercent;
  }

  public InlineResponse2001Data yearlyChange(BigDecimal yearlyChange) {
    this.yearlyChange = yearlyChange;
    return this;
  }

   /**
   * Absolute yearly change
   * @return yearlyChange
  **/
  @Schema(description = "Absolute yearly change")
  public BigDecimal getYearlyChange() {
    return yearlyChange;
  }

  public void setYearlyChange(BigDecimal yearlyChange) {
    this.yearlyChange = yearlyChange;
  }

  public InlineResponse2001Data yearlyChangePercent(BigDecimal yearlyChangePercent) {
    this.yearlyChangePercent = yearlyChangePercent;
    return this;
  }

   /**
   * Yearly change as a percent
   * @return yearlyChangePercent
  **/
  @Schema(description = "Yearly change as a percent")
  public BigDecimal getYearlyChangePercent() {
    return yearlyChangePercent;
  }

  public void setYearlyChangePercent(BigDecimal yearlyChangePercent) {
    this.yearlyChangePercent = yearlyChangePercent;
  }

  public InlineResponse2001Data ask(BigDecimal ask) {
    this.ask = ask;
    return this;
  }

   /**
   * Ask price
   * @return ask
  **/
  @Schema(description = "Ask price")
  public BigDecimal getAsk() {
    return ask;
  }

  public void setAsk(BigDecimal ask) {
    this.ask = ask;
  }

  public InlineResponse2001Data bid(BigDecimal bid) {
    this.bid = bid;
    return this;
  }

   /**
   * Bid price
   * @return bid
  **/
  @Schema(description = "Bid price")
  public BigDecimal getBid() {
    return bid;
  }

  public void setBid(BigDecimal bid) {
    this.bid = bid;
  }

  public InlineResponse2001Data dailyLowest(BigDecimal dailyLowest) {
    this.dailyLowest = dailyLowest;
    return this;
  }

   /**
   * Lowest price of the day
   * @return dailyLowest
  **/
  @Schema(description = "Lowest price of the day")
  public BigDecimal getDailyLowest() {
    return dailyLowest;
  }

  public void setDailyLowest(BigDecimal dailyLowest) {
    this.dailyLowest = dailyLowest;
  }

  public InlineResponse2001Data dailyHighest(BigDecimal dailyHighest) {
    this.dailyHighest = dailyHighest;
    return this;
  }

   /**
   * Highest price of the day
   * @return dailyHighest
  **/
  @Schema(description = "Highest price of the day")
  public BigDecimal getDailyHighest() {
    return dailyHighest;
  }

  public void setDailyHighest(BigDecimal dailyHighest) {
    this.dailyHighest = dailyHighest;
  }

  public InlineResponse2001Data openToday(BigDecimal openToday) {
    this.openToday = openToday;
    return this;
  }

   /**
   * Open price of the day
   * @return openToday
  **/
  @Schema(description = "Open price of the day")
  public BigDecimal getOpenToday() {
    return openToday;
  }

  public void setOpenToday(BigDecimal openToday) {
    this.openToday = openToday;
  }

  public InlineResponse2001Data date(String date) {
    this.date = date;
    return this;
  }

   /**
   * Time of the last update (\&quot;YYYY-MM-DD HH:mm:ss\&quot;)
   * @return date
  **/
  @Schema(description = "Time of the last update (\"YYYY-MM-DD HH:mm:ss\")")
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2001Data inlineResponse2001Data = (InlineResponse2001Data) o;
    return Objects.equals(this.symbol, inlineResponse2001Data.symbol) &&
        Objects.equals(this.last, inlineResponse2001Data.last) &&
        Objects.equals(this.change, inlineResponse2001Data.change) &&
        Objects.equals(this.changePercent, inlineResponse2001Data.changePercent) &&
        Objects.equals(this.weeklyChange, inlineResponse2001Data.weeklyChange) &&
        Objects.equals(this.weeklyChangePercent, inlineResponse2001Data.weeklyChangePercent) &&
        Objects.equals(this.monthlyChange, inlineResponse2001Data.monthlyChange) &&
        Objects.equals(this.monthlyChangePercent, inlineResponse2001Data.monthlyChangePercent) &&
        Objects.equals(this.yearlyChange, inlineResponse2001Data.yearlyChange) &&
        Objects.equals(this.yearlyChangePercent, inlineResponse2001Data.yearlyChangePercent) &&
        Objects.equals(this.ask, inlineResponse2001Data.ask) &&
        Objects.equals(this.bid, inlineResponse2001Data.bid) &&
        Objects.equals(this.dailyLowest, inlineResponse2001Data.dailyLowest) &&
        Objects.equals(this.dailyHighest, inlineResponse2001Data.dailyHighest) &&
        Objects.equals(this.openToday, inlineResponse2001Data.openToday) &&
        Objects.equals(this.date, inlineResponse2001Data.date);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, last, change, changePercent, weeklyChange, weeklyChangePercent, monthlyChange, monthlyChangePercent, yearlyChange, yearlyChangePercent, ask, bid, dailyLowest, dailyHighest, openToday, date);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2001Data {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    change: ").append(toIndentedString(change)).append("\n");
    sb.append("    changePercent: ").append(toIndentedString(changePercent)).append("\n");
    sb.append("    weeklyChange: ").append(toIndentedString(weeklyChange)).append("\n");
    sb.append("    weeklyChangePercent: ").append(toIndentedString(weeklyChangePercent)).append("\n");
    sb.append("    monthlyChange: ").append(toIndentedString(monthlyChange)).append("\n");
    sb.append("    monthlyChangePercent: ").append(toIndentedString(monthlyChangePercent)).append("\n");
    sb.append("    yearlyChange: ").append(toIndentedString(yearlyChange)).append("\n");
    sb.append("    yearlyChangePercent: ").append(toIndentedString(yearlyChangePercent)).append("\n");
    sb.append("    ask: ").append(toIndentedString(ask)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    dailyLowest: ").append(toIndentedString(dailyLowest)).append("\n");
    sb.append("    dailyHighest: ").append(toIndentedString(dailyHighest)).append("\n");
    sb.append("    openToday: ").append(toIndentedString(openToday)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
