/**
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models


/**
 * 
 * @param currency Queried or reversed pair symbol
 * @param &#x60;open&#x60; Open price (if available)
 * @param high High price (if available)
 * @param low Low price (if available)
 * @param close Close price (if available)
 * @param date Data timestamp
 * @param type Data type (\"original\" or \"reversed\")
 * @param error Error message if no data is available
 */
data class InlineResponse2005Data (

    /* Queried or reversed pair symbol */
    val currency: kotlin.String? = null,
    /* Open price (if available) */
    val `open`: java.math.BigDecimal? = null,
    /* High price (if available) */
    val high: java.math.BigDecimal? = null,
    /* Low price (if available) */
    val low: java.math.BigDecimal? = null,
    /* Close price (if available) */
    val close: java.math.BigDecimal? = null,
    /* Data timestamp */
    val date: java.time.LocalDateTime? = null,
    /* Data type (\"original\" or \"reversed\") */
    val type: kotlin.String? = null,
    /* Error message if no data is available */
    val error: kotlin.String? = null
) {
}