/**
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse20010
import io.swagger.client.models.InlineResponse20011
import io.swagger.client.models.InlineResponse20012
import io.swagger.client.models.InlineResponse20013
import io.swagger.client.models.InlineResponse20014
import io.swagger.client.models.InlineResponse20015
import io.swagger.client.models.InlineResponse20016
import io.swagger.client.models.InlineResponse20017
import io.swagger.client.models.InlineResponse20018
import io.swagger.client.models.InlineResponse20019

import io.swagger.client.infrastructure.*

class CryptoCurrencyApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/cdf-f41/cdf/2.0.1") : ApiClient(basePath) {

    /**
     * Get extended historical close prices for a specific crypto pair on an exchange
     * Returns the daily closing price history for a single cryptocurrency trading pair on a specific exchange (e.g. &#x60;LTCUSDT@binance&#x60;). Requires authentication and a subscription with historical access.  - &#x60;symbol&#x60; parameter accepts a single value, formatted as &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;). - &#x60;period&#x60; parameter is required, integer, maximum as supported (suggest up to 1825 for 5 years). 
     * @param symbol Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;LTCUSDT@binance&#x60;).  
     * @param period Number of daily records to return (e.g. 365 for last 1 year, 1825 for 5 years).  
     * @return InlineResponse20015
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoExtendedHistory(symbol: kotlin.String, period: kotlin.Int): InlineResponse20015 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("period", listOf(period.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-extended-history", query = localVariableQuery
        )
        val response = request<InlineResponse20015>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20015
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get intraday (minute-level) price history for a specific crypto pair on an exchange
     * Returns minute-level price history (close prices and timestamps) for a single crypto trading pair on a specific exchange.   The &#x60;symbol&#x60; parameter expects the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;).  - Requires authentication and subscription with historical access. - &#x60;hours&#x60; parameter: Maximum 48 (last 48 hours). 
     * @param symbol Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;).  
     * @param hours Number of hours of minute-level data to return (max 48).  
     * @return InlineResponse20016
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoExtendedMinuteHistory(symbol: kotlin.String, hours: kotlin.Int): InlineResponse20016 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("hours", listOf(hours.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-extended-history-1m", query = localVariableQuery
        )
        val response = request<InlineResponse20016>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20016
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get historical close prices for a cryptocurrency
     * Returns the daily closing price history for a single cryptocurrency symbol for up to 5 years (max 1825 days). Requires authentication and a subscription with historical access.  The &#x60;symbol&#x60; parameter accepts a single cryptocurrency code (e.g., &#x60;XRP&#x60;, &#x60;BTC&#x60;, &#x60;ETH&#x60;). 
     * @param symbol The cryptocurrency symbol (e.g. XRP, BTC, ETH). 
     * @param period Number of daily data points to return (up to 1825; 5 years).  
     * @return InlineResponse20013
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoHistory(symbol: kotlin.String, period: kotlin.Int): InlineResponse20013 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("period", listOf(period.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-history", query = localVariableQuery
        )
        val response = request<InlineResponse20013>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20013
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get live data for one or more cryptocurrencies
     * Returns the latest price and daily metrics for one or more cryptocurrencies. Requires authentication and a subscription with crypto access. 
     * @param symbol One or more cryptocurrency symbols, separated by commas (e.g. &#x60;BTC,ETH,XRP&#x60;)  
     * @return InlineResponse20010
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoLive(symbol: kotlin.String): InlineResponse20010 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-live", query = localVariableQuery
        )
        val response = request<InlineResponse20010>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20010
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get live crypto data for all pairs from a specific exchange
     * Returns the latest live data for all cryptocurrency pairs from a specified exchange (market). Requires authentication and an appropriate subscription with on-chain access.  **The &#x60;exchange&#x60; parameter is required.**   For example: &#x60;binance&#x60;, &#x60;bybit&#x60;, etc. 
     * @param exchange The market or exchange to get all pairs from (e.g. &#x60;binance&#x60;, &#x60;bybit&#x60;, etc.).  
     * @return InlineResponse20012
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoLiveByExchange(exchange: kotlin.String): InlineResponse20012 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("exchange", listOf(exchange.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-live-exchange", query = localVariableQuery
        )
        val response = request<InlineResponse20012>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20012
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get extended live data for one or more crypto pairs from specific exchanges
     * Returns the latest extended data for one or more cryptocurrency pairs from specific exchanges or markets. Requires authentication and a subscription with crypto access.  The &#x60;symbol&#x60; parameter accepts one or more pair-market combinations, separated by commas. - Example: &#x60;BTCUSDT@binance,XRPUSDT@bybit&#x60; 
     * @param symbol One or more cryptocurrency pairs (with market), separated by commas.   Format: &#x60;PAIR@market&#x60;, e.g. &#x60;BTCUSDT@binance,XRPUSDT@bybit&#x60;  
     * @return InlineResponse20011
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoLiveExtended(symbol: kotlin.String): InlineResponse20011 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-live-extended", query = localVariableQuery
        )
        val response = request<InlineResponse20011>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20011
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Crypto Market Fear &amp; Greed Index
     * Returns the daily crypto market Fear &amp; Greed Index as a time series from 2021-04-10 to today. Authentication and on-chain access subscription required. 
     * @return InlineResponse20018
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoMarketFearGreedIndex(): InlineResponse20018 {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-fg"
        )
        val response = request<InlineResponse20018>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)
     * Returns the 1-minute interval closing price history for a single cryptocurrency symbol for up to 48 hours. Requires authentication and a subscription with historical access.  - &#x60;symbol&#x60; parameter accepts a single cryptocurrency code (e.g., &#x60;ETH&#x60;, &#x60;BTC&#x60;). - &#x60;hours&#x60; parameter is required, integer, max 48. 
     * @param symbol The cryptocurrency symbol (e.g. ETH, BTC, XRP). 
     * @param hours Number of hours of minute-level historical data to return (up to 48 hours back).  
     * @return InlineResponse20014
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoMinuteHistory(symbol: kotlin.String, hours: kotlin.Int): InlineResponse20014 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("hours", listOf(hours.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-history-1m", query = localVariableQuery
        )
        val response = request<InlineResponse20014>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get on-chain metrics for Bitcoin and crypto markets
     * Returns daily on-chain indicators as time series for Bitcoin and major crypto assets.   The &#x60;type&#x60; parameter selects the indicator to retrieve (e.g. whale flows, SOPR, Puell Multiple, MVRV, open interest, leverage, funding, active address ratio).  **Available types:**   - whale   - sopr   - puell   - mvrv   - open_interest   - leverage   - funding   - active_address  Requires authentication and subscription with on-chain access. 
     * @param type The type of on-chain metric to fetch 
     * @return InlineResponse20017
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoOnchainMetrics(type: kotlin.String): InlineResponse20017 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("type", listOf(type.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-onchain", query = localVariableQuery
        )
        val response = request<InlineResponse20017>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20017
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get performance of a single cryptocurrency over various periods
     * Returns the percentage change in price for a specified cryptocurrency (e.g., BTC, ETH) over several timeframes, including 1d, 7d, 15d, 30d, 90d, 180d, 270d, 365d, and 720d.   Authentication and a subscription with crypto performance access are required. 
     * @param symbol Cryptocurrency symbol (e.g., BTC, ETH, XRP) 
     * @return InlineResponse20019
     */
    @Suppress("UNCHECKED_CAST")
    fun getCryptoPerformance(symbol: kotlin.String): InlineResponse20019 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/crypto-performance", query = localVariableQuery
        )
        val response = request<InlineResponse20019>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20019
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
