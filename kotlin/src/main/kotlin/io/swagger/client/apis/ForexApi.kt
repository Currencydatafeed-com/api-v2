/**
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.InlineResponse2001
import io.swagger.client.models.InlineResponse2002
import io.swagger.client.models.InlineResponse2003
import io.swagger.client.models.InlineResponse2004
import io.swagger.client.models.InlineResponse2005
import io.swagger.client.models.InlineResponse2006
import io.swagger.client.models.InlineResponse2007
import io.swagger.client.models.InlineResponse2008
import io.swagger.client.models.InlineResponse2009

import io.swagger.client.infrastructure.*

class ForexApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/cdf-f41/cdf/2.0.1") : ApiClient(basePath) {

    /**
     * Convert an amount between two currencies
     * Converts a specified amount from one currency to another, returning the latest available rate and result. Direct, reverse, or USD-intermediate conversion is used as needed. All parameters are required. 
     * @param from The source currency code (e.g., &#x60;EUR&#x60;). 
     * @param to The target currency code (e.g., &#x60;TRY&#x60;). 
     * @param amount The amount to convert. 
     * @return InlineResponse2003
     */
    @Suppress("UNCHECKED_CAST")
    fun convertAmount(from: kotlin.String, to: kotlin.String, amount: java.math.BigDecimal): InlineResponse2003 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("from", listOf(from.toString()))
            put("to", listOf(to.toString()))
            put("amount", listOf(amount.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/convert", query = localVariableQuery
        )
        val response = request<InlineResponse2003>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get historical OHLC data for a currency pair on a given date
     * Returns historical open, high, low, and close values for one or more currency pairs on a specific date. If direct data is not available for a pair, the system attempts to reverse the pair. Returns an error if the date is more than 4 years in the past. Requires authentication and a subscription with historical access. 
     * @param symbol One or more currency pairs, separated by spaces.   Example: &#x60;EURUSD USDTRY&#x60;  
     * @param date The date to query in YYYY-MM-DD format. 
     * @return InlineResponse2005
     */
    @Suppress("UNCHECKED_CAST")
    fun getHistoricalOHLC(symbol: kotlin.String, date: java.time.LocalDate): InlineResponse2005 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("date", listOf(parseDateToQueryString(date)))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/history", query = localVariableQuery
        )
        val response = request<InlineResponse2005>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get intraday (minute/hour) OHLC data for a symbol with flexible time selection
     * Returns intraday open, high, low, and close (OHLC) data for a symbol, supporting multiple time selection modes: - **last:** Most recent N records - **hours:** Records for the last N hours - **from/to:** Records between custom date ranges The &#x60;interval&#x60; parameter is required (valid values: 1, 5, 15, 60 for minutes/hours). You must specify **exactly one** of the following: &#x60;last&#x60;, &#x60;hours&#x60;, or both &#x60;from&#x60; and &#x60;to&#x60;. Requires authentication and subscription with intraday/minute OHLC access. 
     * @param symbol The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     * @param interval Data interval in minutes: - 1 &#x3D; 1 minute - 5 &#x3D; 5 minutes - 15 &#x3D; 15 minutes - 60 &#x3D; 1 hour  
     * @param last Number of most recent records to return (exclusive with hours/from/to) (optional)
     * @param hours Records for the last N hours (exclusive with last/from/to) (optional)
     * @param from Start date (inclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be older than &#x60;to&#x60; (optional)
     * @param to End date (exclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be newer than &#x60;from&#x60; (optional)
     * @return InlineResponse2007
     */
    @Suppress("UNCHECKED_CAST")
    fun getIntradayOHLC(symbol: kotlin.String, interval: kotlin.Int, last: kotlin.Int? = null, hours: kotlin.Int? = null, from: java.time.LocalDate? = null, to: java.time.LocalDate? = null): InlineResponse2007 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            put("interval", listOf(interval.toString()))
            if (last != null) {
                put("last", listOf(last.toString()))
            }
            if (hours != null) {
                put("hours", listOf(hours.toString()))
            }
            if (from != null) {
                put("from", listOf(parseDateToQueryString(from)))
            }
            if (to != null) {
                put("to", listOf(parseDateToQueryString(to)))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/intraday", query = localVariableQuery
        )
        val response = request<InlineResponse2007>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2007
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Technical Analysis - Get Support, Resistence, Bollinger Bands for a symbol
     * Returns pivot points (pivot, support/resistance levels) and Bollinger Bands for the latest data of the specified symbol. Requires authentication and a subscription with technical analysis (TA) access. If not enough historical data is available for Bollinger Bands (minimum 20 periods), the endpoint returns an error for that calculation. 
     * @param symbol The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     * @return InlineResponse2008
     */
    @Suppress("UNCHECKED_CAST")
    fun getLevels(symbol: kotlin.String): InlineResponse2008 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/levels", query = localVariableQuery
        )
        val response = request<InlineResponse2008>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get live forex prices
     * Returns the latest live rates for all supported forex currency pairs.  You can request specific pairs by providing a comma-separated list of symbols in the &#x60;symbol&#x60; parameter, e.g. &#x60;EURUSD,GBPUSD,USDSEK&#x60;. 
     * @param symbol Comma-separated list of currency pairs to filter the results (e.g. &#x60;EURUSD,GBPUSD,USDSEK&#x60;). If not provided, all pairs are returned.  (optional)
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun getLiveRates(symbol: kotlin.String? = null): InlineResponse2001 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (symbol != null) {
                put("symbol", listOf(symbol.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/live-rates", query = localVariableQuery
        )
        val response = request<InlineResponse2001>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get historical OHLC data for a currency pair within a date range
     * Returns historical open, high, low, and close (OHLC) data for a currency pair over a specified date range. Maximum 8 years of data can be queried at once.   Requires authentication and a subscription with timeframe query access. 
     * @param currency Currency pair symbol (e.g. &#x60;EURUSD&#x60;) 
     * @param from Start date (YYYY-MM-DD), must be older than &#x60;to&#x60; 
     * @param to End date (YYYY-MM-DD), must be newer than &#x60;from&#x60; 
     * @return InlineResponse2006
     */
    @Suppress("UNCHECKED_CAST")
    fun getOHLCByTimeframe(currency: kotlin.String, from: java.time.LocalDate, to: java.time.LocalDate): InlineResponse2006 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("currency", listOf(currency.toString()))
            put("from", listOf(parseDateToQueryString(from)))
            put("to", listOf(parseDateToQueryString(to)))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/timeframe", query = localVariableQuery
        )
        val response = request<InlineResponse2006>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get percentage changes for a symbol for different periods
     * Returns the percentage change in price for the given symbol over several time intervals (1 hour, 4 hours, 1 day, 7 days, 30 days, 90 days, 180 days, 270 days, 365 days, 720 days). Requires authentication and an active subscription with gainers/losers access. 
     * @param symbol The symbol code to query (e.g. &#x60;EURUSD&#x60;). 
     * @return InlineResponse2004
     */
    @Suppress("UNCHECKED_CAST")
    fun getPerformance(symbol: kotlin.String): InlineResponse2004 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/performance", query = localVariableQuery
        )
        val response = request<InlineResponse2004>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get rates with other currencies using a custom base currency
     * Returns the latest exchange rates for one or more target currencies, using the specified base currency as the reference. Provide the base (source) and one or more target currencies (comma-separated) in the query string. 
     * @param source The base currency to use for conversion (e.g., &#x60;SEK&#x60;).  
     * @param target One or more target currencies to return rates for, separated by a comma (e.g., &#x60;TRY,GBP&#x60;).  
     * @return kotlin.Array<InlineResponse2002>
     */
    @Suppress("UNCHECKED_CAST")
    fun getRatesBySource(source: kotlin.String, target: kotlin.Array<kotlin.String>): kotlin.Array<InlineResponse2002> {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("source", listOf(source.toString()))
            put("target", toMultiValue(target.toList(), "csv"))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/source", query = localVariableQuery
        )
        val response = request<kotlin.Array<InlineResponse2002>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2002>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get technical analysis indicators for a symbol (Ema &amp; Sma Levels, CCI, Williams%R, ADX and Stochastic Indicators)
     * Returns a range of daily technical analysis indicators for the specified symbol (up to 720 days). Includes MACD, RSI, moving averages, Stochastic, ADX, CCI, Williams %R, and more. Requires authentication and a subscription with technical analysis (TA) access. 
     * @param symbol The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     * @param days Number of days to return (default: 365, max: 720)  (optional)
     * @return InlineResponse2009
     */
    @Suppress("UNCHECKED_CAST")
    fun getTechnicalAnalysis(symbol: kotlin.String, days: kotlin.Int? = null): InlineResponse2009 {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("symbol", listOf(symbol.toString()))
            if (days != null) {
                put("days", listOf(days.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/ta", query = localVariableQuery
        )
        val response = request<InlineResponse2009>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
