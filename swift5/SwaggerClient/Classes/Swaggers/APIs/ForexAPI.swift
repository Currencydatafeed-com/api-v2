//
// ForexAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ForexAPI {
    /**
     Convert an amount between two currencies

     - parameter from: (query) The source currency code (e.g., &#x60;EUR&#x60;). 
     - parameter to: (query) The target currency code (e.g., &#x60;TRY&#x60;). 
     - parameter amount: (query) The amount to convert. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertAmount(from: String, to: String, amount: Decimal, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        convertAmountWithRequestBuilder(from: from, to: to, amount: amount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Convert an amount between two currencies
     - GET /convert

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : {
    "conversion_result" : 1.4658129805029452,
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115,
    "rate" : 6.027456183070403,
    "from" : "from",
    "to" : "to",
    "error" : "error"
  },
  "success" : true
}}]
     - parameter from: (query) The source currency code (e.g., &#x60;EUR&#x60;). 
     - parameter to: (query) The target currency code (e.g., &#x60;TRY&#x60;). 
     - parameter amount: (query) The amount to convert. 

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func convertAmountWithRequestBuilder(from: String, to: String, amount: Decimal) -> RequestBuilder<InlineResponse2003> {
        let path = "/convert"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "from": from, 
                        "to": to, 
                        "amount": amount
        ])


        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get historical OHLC data for a currency pair on a given date

     - parameter symbol: (query) One or more currency pairs, separated by spaces.   Example: &#x60;EURUSD USDTRY&#x60;  
     - parameter date: (query) The date to query in YYYY-MM-DD format. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHistoricalOHLC(symbol: String, date: Date, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        getHistoricalOHLCWithRequestBuilder(symbol: symbol, date: date).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get historical OHLC data for a currency pair on a given date
     - GET /history

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "high" : 6.027456183070403,
    "low" : 1.4658129805029452,
    "currency" : "currency",
    "type" : "type",
    "error" : "error",
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "high" : 6.027456183070403,
    "low" : 1.4658129805029452,
    "currency" : "currency",
    "type" : "type",
    "error" : "error",
    "close" : 5.962133916683182,
    "open" : 0.8008281904610115
  } ],
  "status" : true
}}]
     - parameter symbol: (query) One or more currency pairs, separated by spaces.   Example: &#x60;EURUSD USDTRY&#x60;  
     - parameter date: (query) The date to query in YYYY-MM-DD format. 

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func getHistoricalOHLCWithRequestBuilder(symbol: String, date: Date) -> RequestBuilder<InlineResponse2005> {
        let path = "/history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "date": date.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter interval
     */
    public enum Interval_getIntradayOHLC: Int { 
        case _1 = 1
        case _5 = 5
        case _15 = 15
        case _60 = 60
    }

    /**
     Get intraday (minute/hour) OHLC data for a symbol with flexible time selection

     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     - parameter interval: (query) Data interval in minutes: - 1 &#x3D; 1 minute - 5 &#x3D; 5 minutes - 15 &#x3D; 15 minutes - 60 &#x3D; 1 hour  
     - parameter last: (query) Number of most recent records to return (exclusive with hours/from/to) (optional)
     - parameter hours: (query) Records for the last N hours (exclusive with last/from/to) (optional)
     - parameter from: (query) Start date (inclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be older than &#x60;to&#x60; (optional)
     - parameter to: (query) End date (exclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be newer than &#x60;from&#x60; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIntradayOHLC(symbol: String, interval: Interval_getIntradayOHLC, last: Int? = nil, hours: Int? = nil, from: Date? = nil, to: Date? = nil, completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        getIntradayOHLCWithRequestBuilder(symbol: symbol, interval: interval, last: last, hours: hours, from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get intraday (minute/hour) OHLC data for a symbol with flexible time selection
     - GET /intraday

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : {
    "data" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    } ],
    "currency" : "currency",
    "type" : "type"
  },
  "success" : true,
  "error" : "error"
}}]
     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     - parameter interval: (query) Data interval in minutes: - 1 &#x3D; 1 minute - 5 &#x3D; 5 minutes - 15 &#x3D; 15 minutes - 60 &#x3D; 1 hour  
     - parameter last: (query) Number of most recent records to return (exclusive with hours/from/to) (optional)
     - parameter hours: (query) Records for the last N hours (exclusive with last/from/to) (optional)
     - parameter from: (query) Start date (inclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be older than &#x60;to&#x60; (optional)
     - parameter to: (query) End date (exclusive, YYYY-MM-DD or YYYY-MM-DD HH:MM:SS), must be newer than &#x60;from&#x60; (optional)

     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func getIntradayOHLCWithRequestBuilder(symbol: String, interval: Interval_getIntradayOHLC, last: Int? = nil, hours: Int? = nil, from: Date? = nil, to: Date? = nil) -> RequestBuilder<InlineResponse2007> {
        let path = "/intraday"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "interval": interval.rawValue, 
                        "last": last?.encodeToJSON(), 
                        "hours": hours?.encodeToJSON(), 
                        "from": from?.encodeToJSON(), 
                        "to": to?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Technical Analysis - Get Support, Resistence, Bollinger Bands for a symbol

     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLevels(symbol: String, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        getLevelsWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Technical Analysis - Get Support, Resistence, Bollinger Bands for a symbol
     - GET /levels

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : {
    "bollinger_upper" : 9.301444243932576,
    "symbol" : "symbol",
    "bollinger_lower" : 3.616076749251911,
    "pivot" : 0.8008281904610115,
    "resistance3" : 2.3021358869347655,
    "support3" : 7.061401241503109,
    "resistance2" : 5.962133916683182,
    "resistance1" : 6.027456183070403,
    "support2" : 5.637376656633329,
    "support1" : 1.4658129805029452
  },
  "success" : true,
  "error" : "error"
}}]
     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 

     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func getLevelsWithRequestBuilder(symbol: String) -> RequestBuilder<InlineResponse2008> {
        let path = "/levels"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get live forex prices

     - parameter symbol: (query) Comma-separated list of currency pairs to filter the results (e.g. &#x60;EURUSD,GBPUSD,USDSEK&#x60;). If not provided, all pairs are returned.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLiveRates(symbol: String? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        getLiveRatesWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get live forex prices
     - GET /live-rates

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "yearly_change_percent" : 3.616076749251911,
    "date" : "date",
    "symbol" : "symbol",
    "last" : 0.8008281904610115,
    "change" : 6.027456183070403,
    "monthly_change_percent" : 7.061401241503109,
    "change_percent" : 1.4658129805029452,
    "weekly_change" : 5.962133916683182,
    "yearly_change" : 9.301444243932576,
    "weekly_change_percent" : 5.637376656633329,
    "open_today" : 1.0246457001441578,
    "ask" : 2.027123023002322,
    "monthly_change" : 2.3021358869347655,
    "bid" : 4.145608029883936,
    "daily_highest" : 1.2315135367772556,
    "daily_lowest" : 7.386281948385884
  }, {
    "yearly_change_percent" : 3.616076749251911,
    "date" : "date",
    "symbol" : "symbol",
    "last" : 0.8008281904610115,
    "change" : 6.027456183070403,
    "monthly_change_percent" : 7.061401241503109,
    "change_percent" : 1.4658129805029452,
    "weekly_change" : 5.962133916683182,
    "yearly_change" : 9.301444243932576,
    "weekly_change_percent" : 5.637376656633329,
    "open_today" : 1.0246457001441578,
    "ask" : 2.027123023002322,
    "monthly_change" : 2.3021358869347655,
    "bid" : 4.145608029883936,
    "daily_highest" : 1.2315135367772556,
    "daily_lowest" : 7.386281948385884
  } ],
  "success" : true
}}]
     - parameter symbol: (query) Comma-separated list of currency pairs to filter the results (e.g. &#x60;EURUSD,GBPUSD,USDSEK&#x60;). If not provided, all pairs are returned.  (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getLiveRatesWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/live-rates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get historical OHLC data for a currency pair within a date range

     - parameter currency: (query) Currency pair symbol (e.g. &#x60;EURUSD&#x60;) 
     - parameter from: (query) Start date (YYYY-MM-DD), must be older than &#x60;to&#x60; 
     - parameter to: (query) End date (YYYY-MM-DD), must be newer than &#x60;from&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOHLCByTimeframe(currency: String, from: Date, to: Date, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        getOHLCByTimeframeWithRequestBuilder(currency: currency, from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get historical OHLC data for a currency pair within a date range
     - GET /timeframe

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "currency" : "currency",
    "history" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    } ],
    "type" : "type",
    "error" : "error"
  }, {
    "currency" : "currency",
    "history" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "high" : 6.027456183070403,
      "low" : 1.4658129805029452,
      "close" : 5.962133916683182,
      "open" : 0.8008281904610115
    } ],
    "type" : "type",
    "error" : "error"
  } ],
  "currency" : "currency",
  "from" : "2000-01-23",
  "to" : "2000-01-23",
  "status" : true
}}]
     - parameter currency: (query) Currency pair symbol (e.g. &#x60;EURUSD&#x60;) 
     - parameter from: (query) Start date (YYYY-MM-DD), must be older than &#x60;to&#x60; 
     - parameter to: (query) End date (YYYY-MM-DD), must be newer than &#x60;from&#x60; 

     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func getOHLCByTimeframeWithRequestBuilder(currency: String, from: Date, to: Date) -> RequestBuilder<InlineResponse2006> {
        let path = "/timeframe"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "currency": currency, 
                        "from": from.encodeToJSON(), 
                        "to": to.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get percentage changes for a symbol for different periods

     - parameter symbol: (query) The symbol code to query (e.g. &#x60;EURUSD&#x60;). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPerformance(symbol: String, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        getPerformanceWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get percentage changes for a symbol for different periods
     - GET /performance

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : {
    "symbol" : "symbol",
    "PercentageChange_7d" : 5.962133916683182,
    "PercentageChange_30d" : 5.637376656633329,
    "PercentageChange_720d" : 2.027123023002322,
    "PercentageChange_180d" : 7.061401241503109,
    "PercentageChange_365d" : 3.616076749251911,
    "PercentageChange_4h" : 6.027456183070403,
    "PercentageChange_1d" : 1.4658129805029452,
    "PercentageChange_90d" : 2.3021358869347655,
    "PercentageChange_270d" : 9.301444243932576,
    "PercentageChange_1h" : 0.8008281904610115
  },
  "success" : true
}}]
     - parameter symbol: (query) The symbol code to query (e.g. &#x60;EURUSD&#x60;). 

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func getPerformanceWithRequestBuilder(symbol: String) -> RequestBuilder<InlineResponse2004> {
        let path = "/performance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get rates with other currencies using a custom base currency

     - parameter source: (query) The base currency to use for conversion (e.g., &#x60;SEK&#x60;).  
     - parameter target: (query) One or more target currencies to return rates for, separated by a comma (e.g., &#x60;TRY,GBP&#x60;).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRatesBySource(source: String, target: [String], completion: @escaping ((_ data: [InlineResponse2002]?,_ error: Error?) -> Void)) {
        getRatesBySourceWithRequestBuilder(source: source, target: target).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rates with other currencies using a custom base currency
     - GET /source

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "last" : "last",
  "currency" : "currency"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "last" : "last",
  "currency" : "currency"
} ]}]
     - parameter source: (query) The base currency to use for conversion (e.g., &#x60;SEK&#x60;).  
     - parameter target: (query) One or more target currencies to return rates for, separated by a comma (e.g., &#x60;TRY,GBP&#x60;).  

     - returns: RequestBuilder<[InlineResponse2002]> 
     */
    open class func getRatesBySourceWithRequestBuilder(source: String, target: [String]) -> RequestBuilder<[InlineResponse2002]> {
        let path = "/source"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "source": source, 
                        "target": target
        ])


        let requestBuilder: RequestBuilder<[InlineResponse2002]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get technical analysis indicators for a symbol (Ema & Sma Levels, CCI, Williams%R, ADX and Stochastic Indicators)

     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     - parameter days: (query) Number of days to return (default: 365, max: 720)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTechnicalAnalysis(symbol: String, days: Int? = nil, completion: @escaping ((_ data: InlineResponse2009?,_ error: Error?) -> Void)) {
        getTechnicalAnalysisWithRequestBuilder(symbol: symbol, days: days).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get technical analysis indicators for a symbol (Ema & Sma Levels, CCI, Williams%R, ADX and Stochastic Indicators)
     - GET /ta

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "success" : true,
  "macd_data" : [ {
    "date" : "2000-01-23",
    "signal_line" : 6.027456183070403,
    "macd" : 0.8008281904610115
  }, {
    "date" : "2000-01-23",
    "signal_line" : 6.027456183070403,
    "macd" : 0.8008281904610115
  } ],
  "rsi_data" : [ {
    "date" : "2000-01-23",
    "rsi" : 1.4658129805029452,
    "rsi_signal" : "rsi_signal"
  }, {
    "date" : "2000-01-23",
    "rsi" : 1.4658129805029452,
    "rsi_signal" : "rsi_signal"
  } ],
  "sembol" : "sembol",
  "error" : "error",
  "technical_data" : [ {
    "date" : "2000-01-23",
    "ema_12" : 3.616076749251911,
    "ema_50" : 4.145608029883936,
    "cci" : 1.4894159098541704,
    "stochastic_d" : 1.2315135367772556,
    "ema_26" : 2.027123023002322,
    "williams_r" : 6.84685269835264,
    "stochastic_k" : 7.386281948385884,
    "adx" : 1.0246457001441578,
    "sma_200" : 9.301444243932576,
    "sma_100" : 7.061401241503109,
    "sma_50" : 2.3021358869347655,
    "sma_20" : 5.637376656633329,
    "sma_10" : 5.962133916683182
  }, {
    "date" : "2000-01-23",
    "ema_12" : 3.616076749251911,
    "ema_50" : 4.145608029883936,
    "cci" : 1.4894159098541704,
    "stochastic_d" : 1.2315135367772556,
    "ema_26" : 2.027123023002322,
    "williams_r" : 6.84685269835264,
    "stochastic_k" : 7.386281948385884,
    "adx" : 1.0246457001441578,
    "sma_200" : 9.301444243932576,
    "sma_100" : 7.061401241503109,
    "sma_50" : 2.3021358869347655,
    "sma_20" : 5.637376656633329,
    "sma_10" : 5.962133916683182
  } ]
}}]
     - parameter symbol: (query) The symbol/pair to query (e.g. &#x60;EURUSD&#x60;) 
     - parameter days: (query) Number of days to return (default: 365, max: 720)  (optional)

     - returns: RequestBuilder<InlineResponse2009> 
     */
    open class func getTechnicalAnalysisWithRequestBuilder(symbol: String, days: Int? = nil) -> RequestBuilder<InlineResponse2009> {
        let path = "/ta"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "days": days?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
