//
// CryptoCurrencyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CryptoCurrencyAPI {
    /**
     Get extended historical close prices for a specific crypto pair on an exchange

     - parameter symbol: (query) Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;LTCUSDT@binance&#x60;).  
     - parameter period: (query) Number of daily records to return (e.g. 365 for last 1 year, 1825 for 5 years).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoExtendedHistory(symbol: String, period: Int, completion: @escaping ((_ data: InlineResponse20015?,_ error: Error?) -> Void)) {
        getCryptoExtendedHistoryWithRequestBuilder(symbol: symbol, period: period).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get extended historical close prices for a specific crypto pair on an exchange
     - GET /crypto-extended-history

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23",
    "close" : 0.8008281904610115
  }, {
    "date" : "2000-01-23",
    "close" : 0.8008281904610115
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;LTCUSDT@binance&#x60;).  
     - parameter period: (query) Number of daily records to return (e.g. 365 for last 1 year, 1825 for 5 years).  

     - returns: RequestBuilder<InlineResponse20015> 
     */
    open class func getCryptoExtendedHistoryWithRequestBuilder(symbol: String, period: Int) -> RequestBuilder<InlineResponse20015> {
        let path = "/crypto-extended-history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "period": period.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse20015>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get intraday (minute-level) price history for a specific crypto pair on an exchange

     - parameter symbol: (query) Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;).  
     - parameter hours: (query) Number of hours of minute-level data to return (max 48).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoExtendedMinuteHistory(symbol: String, hours: Int, completion: @escaping ((_ data: InlineResponse20016?,_ error: Error?) -> Void)) {
        getCryptoExtendedMinuteHistoryWithRequestBuilder(symbol: symbol, hours: hours).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get intraday (minute-level) price history for a specific crypto pair on an exchange
     - GET /crypto-extended-history-1m

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "close" : 0.8008281904610115
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "close" : 0.8008281904610115
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) Trading pair and exchange in the format &#x60;PAIR@exchange&#x60; (e.g. &#x60;BTCUSDT@binance&#x60;).  
     - parameter hours: (query) Number of hours of minute-level data to return (max 48).  

     - returns: RequestBuilder<InlineResponse20016> 
     */
    open class func getCryptoExtendedMinuteHistoryWithRequestBuilder(symbol: String, hours: Int) -> RequestBuilder<InlineResponse20016> {
        let path = "/crypto-extended-history-1m"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "hours": hours.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse20016>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get historical close prices for a cryptocurrency

     - parameter symbol: (query) The cryptocurrency symbol (e.g. XRP, BTC, ETH). 
     - parameter period: (query) Number of daily data points to return (up to 1825; 5 years).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoHistory(symbol: String, period: Int, completion: @escaping ((_ data: InlineResponse20013?,_ error: Error?) -> Void)) {
        getCryptoHistoryWithRequestBuilder(symbol: symbol, period: period).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get historical close prices for a cryptocurrency
     - GET /crypto-history

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23",
    "close" : 0.8008281904610115
  }, {
    "date" : "2000-01-23",
    "close" : 0.8008281904610115
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) The cryptocurrency symbol (e.g. XRP, BTC, ETH). 
     - parameter period: (query) Number of daily data points to return (up to 1825; 5 years).  

     - returns: RequestBuilder<InlineResponse20013> 
     */
    open class func getCryptoHistoryWithRequestBuilder(symbol: String, period: Int) -> RequestBuilder<InlineResponse20013> {
        let path = "/crypto-history"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "period": period.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse20013>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get live data for one or more cryptocurrencies

     - parameter symbol: (query) One or more cryptocurrency symbols, separated by commas (e.g. &#x60;BTC,ETH,XRP&#x60;)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoLive(symbol: String, completion: @escaping ((_ data: InlineResponse20010?,_ error: Error?) -> Void)) {
        getCryptoLiveWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get live data for one or more cryptocurrencies
     - GET /crypto-live

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "last_btc" : 1.4658129805029452,
    "symbol" : "symbol",
    "high" : 5.637376656633329,
    "last" : 0.8008281904610115,
    "daily_change_percentage" : 6.027456183070403,
    "low" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "last_btc" : 1.4658129805029452,
    "symbol" : "symbol",
    "high" : 5.637376656633329,
    "last" : 0.8008281904610115,
    "daily_change_percentage" : 6.027456183070403,
    "low" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) One or more cryptocurrency symbols, separated by commas (e.g. &#x60;BTC,ETH,XRP&#x60;)  

     - returns: RequestBuilder<InlineResponse20010> 
     */
    open class func getCryptoLiveWithRequestBuilder(symbol: String) -> RequestBuilder<InlineResponse20010> {
        let path = "/crypto-live"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse20010>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get live crypto data for all pairs from a specific exchange

     - parameter exchange: (query) The market or exchange to get all pairs from (e.g. &#x60;binance&#x60;, &#x60;bybit&#x60;, etc.).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoLiveByExchange(exchange: String, completion: @escaping ((_ data: InlineResponse20012?,_ error: Error?) -> Void)) {
        getCryptoLiveByExchangeWithRequestBuilder(exchange: exchange).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get live crypto data for all pairs from a specific exchange
     - GET /crypto-live-exchange

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "symbol" : "symbol",
    "high" : 1.4658129805029452,
    "last" : 0.8008281904610115,
    "low" : 6.027456183070403,
    "daily_change_percentage" : 5.637376656633329,
    "previous_day" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "symbol" : "symbol",
    "high" : 1.4658129805029452,
    "last" : 0.8008281904610115,
    "low" : 6.027456183070403,
    "daily_change_percentage" : 5.637376656633329,
    "previous_day" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter exchange: (query) The market or exchange to get all pairs from (e.g. &#x60;binance&#x60;, &#x60;bybit&#x60;, etc.).  

     - returns: RequestBuilder<InlineResponse20012> 
     */
    open class func getCryptoLiveByExchangeWithRequestBuilder(exchange: String) -> RequestBuilder<InlineResponse20012> {
        let path = "/crypto-live-exchange"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "exchange": exchange
        ])


        let requestBuilder: RequestBuilder<InlineResponse20012>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get extended live data for one or more crypto pairs from specific exchanges

     - parameter symbol: (query) One or more cryptocurrency pairs (with market), separated by commas.   Format: &#x60;PAIR@market&#x60;, e.g. &#x60;BTCUSDT@binance,XRPUSDT@bybit&#x60;  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoLiveExtended(symbol: String, completion: @escaping ((_ data: InlineResponse20011?,_ error: Error?) -> Void)) {
        getCryptoLiveExtendedWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get extended live data for one or more crypto pairs from specific exchanges
     - GET /crypto-live-extended

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "symbol" : "symbol",
    "high" : 1.4658129805029452,
    "last" : 0.8008281904610115,
    "low" : 6.027456183070403,
    "daily_change_percentage" : 5.637376656633329,
    "previous_day" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "symbol" : "symbol",
    "high" : 1.4658129805029452,
    "last" : 0.8008281904610115,
    "low" : 6.027456183070403,
    "daily_change_percentage" : 5.637376656633329,
    "previous_day" : 5.962133916683182,
    "source" : "source",
    "updated" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) One or more cryptocurrency pairs (with market), separated by commas.   Format: &#x60;PAIR@market&#x60;, e.g. &#x60;BTCUSDT@binance,XRPUSDT@bybit&#x60;  

     - returns: RequestBuilder<InlineResponse20011> 
     */
    open class func getCryptoLiveExtendedWithRequestBuilder(symbol: String) -> RequestBuilder<InlineResponse20011> {
        let path = "/crypto-live-extended"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse20011>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Crypto Market Fear & Greed Index

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoMarketFearGreedIndex(completion: @escaping ((_ data: InlineResponse20018?,_ error: Error?) -> Void)) {
        getCryptoMarketFearGreedIndexWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Crypto Market Fear & Greed Index
     - GET /crypto-fg

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "updated" : "2000-01-23T04:56:07.000+00:00",
    "value" : 0.8008281904610115
  }, {
    "updated" : "2000-01-23T04:56:07.000+00:00",
    "value" : 0.8008281904610115
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]

     - returns: RequestBuilder<InlineResponse20018> 
     */
    open class func getCryptoMarketFearGreedIndexWithRequestBuilder() -> RequestBuilder<InlineResponse20018> {
        let path = "/crypto-fg"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse20018>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)

     - parameter symbol: (query) The cryptocurrency symbol (e.g. ETH, BTC, XRP). 
     - parameter hours: (query) Number of hours of minute-level historical data to return (up to 48 hours back).  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoMinuteHistory(symbol: String, hours: Int, completion: @escaping ((_ data: InlineResponse20014?,_ error: Error?) -> Void)) {
        getCryptoMinuteHistoryWithRequestBuilder(symbol: symbol, hours: hours).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)
     - GET /crypto-history-1m

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "close" : 0.8008281904610115
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "close" : 0.8008281904610115
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) The cryptocurrency symbol (e.g. ETH, BTC, XRP). 
     - parameter hours: (query) Number of hours of minute-level historical data to return (up to 48 hours back).  

     - returns: RequestBuilder<InlineResponse20014> 
     */
    open class func getCryptoMinuteHistoryWithRequestBuilder(symbol: String, hours: Int) -> RequestBuilder<InlineResponse20014> {
        let path = "/crypto-history-1m"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol, 
                        "hours": hours.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<InlineResponse20014>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter type
     */
    public enum ModelType_getCryptoOnchainMetrics: String { 
        case whale = "whale"
        case sopr = "sopr"
        case puell = "puell"
        case mvrv = "mvrv"
        case openInterest = "open_interest"
        case leverage = "leverage"
        case funding = "funding"
        case activeAddress = "active_address"
    }

    /**
     Get on-chain metrics for Bitcoin and crypto markets

     - parameter type: (query) The type of on-chain metric to fetch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoOnchainMetrics(type: ModelType_getCryptoOnchainMetrics, completion: @escaping ((_ data: InlineResponse20017?,_ error: Error?) -> Void)) {
        getCryptoOnchainMetricsWithRequestBuilder(type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get on-chain metrics for Bitcoin and crypto markets
     - GET /crypto-onchain

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : {
    "key" : [ {
      "updated" : "2000-01-23",
      "value" : 0.8008281904610115
    }, {
      "updated" : "2000-01-23",
      "value" : 0.8008281904610115
    } ]
  },
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter type: (query) The type of on-chain metric to fetch 

     - returns: RequestBuilder<InlineResponse20017> 
     */
    open class func getCryptoOnchainMetricsWithRequestBuilder(type: ModelType_getCryptoOnchainMetrics) -> RequestBuilder<InlineResponse20017> {
        let path = "/crypto-onchain"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "type": type.rawValue
        ])


        let requestBuilder: RequestBuilder<InlineResponse20017>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get performance of a single cryptocurrency over various periods

     - parameter symbol: (query) Cryptocurrency symbol (e.g., BTC, ETH, XRP) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCryptoPerformance(symbol: String, completion: @escaping ((_ data: InlineResponse20019?,_ error: Error?) -> Void)) {
        getCryptoPerformanceWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get performance of a single cryptocurrency over various periods
     - GET /crypto-performance

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "15d" : 1.4658129,
    "1d" : 0.8008282,
    "720d" : 3.6160767,
    "30d" : 5.962134,
    "365d" : 9.301444,
    "180d" : 2.302136,
    "7d" : 6.0274563,
    "90d" : 5.637377,
    "270d" : 7.0614014
  }, {
    "15d" : 1.4658129,
    "1d" : 0.8008282,
    "720d" : 3.6160767,
    "30d" : 5.962134,
    "365d" : 9.301444,
    "180d" : 2.302136,
    "7d" : 6.0274563,
    "90d" : 5.637377,
    "270d" : 7.0614014
  } ],
  "success" : true,
  "error_code" : "error_code",
  "message" : "message"
}}]
     - parameter symbol: (query) Cryptocurrency symbol (e.g., BTC, ETH, XRP) 

     - returns: RequestBuilder<InlineResponse20019> 
     */
    open class func getCryptoPerformanceWithRequestBuilder(symbol: String) -> RequestBuilder<InlineResponse20019> {
        let path = "/crypto-performance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "symbol": symbol
        ])


        let requestBuilder: RequestBuilder<InlineResponse20019>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
