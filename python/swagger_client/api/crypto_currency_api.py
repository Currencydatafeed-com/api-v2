# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CryptoCurrencyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_crypto_extended_history(self, symbol, period, **kwargs):  # noqa: E501
        """Get extended historical close prices for a specific crypto pair on an exchange  # noqa: E501

        Returns the daily closing price history for a single cryptocurrency trading pair on a specific exchange (e.g. `LTCUSDT@binance`). Requires authentication and a subscription with historical access.  - `symbol` parameter accepts a single value, formatted as `PAIR@exchange` (e.g. `BTCUSDT@binance`). - `period` parameter is required, integer, maximum as supported (suggest up to 1825 for 5 years).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_extended_history(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading pair and exchange in the format `PAIR@exchange` (e.g. `LTCUSDT@binance`).  (required)
        :param int period: Number of daily records to return (e.g. 365 for last 1 year, 1825 for 5 years).  (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_extended_history_with_http_info(symbol, period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_extended_history_with_http_info(symbol, period, **kwargs)  # noqa: E501
            return data

    def get_crypto_extended_history_with_http_info(self, symbol, period, **kwargs):  # noqa: E501
        """Get extended historical close prices for a specific crypto pair on an exchange  # noqa: E501

        Returns the daily closing price history for a single cryptocurrency trading pair on a specific exchange (e.g. `LTCUSDT@binance`). Requires authentication and a subscription with historical access.  - `symbol` parameter accepts a single value, formatted as `PAIR@exchange` (e.g. `BTCUSDT@binance`). - `period` parameter is required, integer, maximum as supported (suggest up to 1825 for 5 years).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_extended_history_with_http_info(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading pair and exchange in the format `PAIR@exchange` (e.g. `LTCUSDT@binance`).  (required)
        :param int period: Number of daily records to return (e.g. 365 for last 1 year, 1825 for 5 years).  (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_extended_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_extended_history`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `get_crypto_extended_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-extended-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_extended_minute_history(self, symbol, hours, **kwargs):  # noqa: E501
        """Get intraday (minute-level) price history for a specific crypto pair on an exchange  # noqa: E501

        Returns minute-level price history (close prices and timestamps) for a single crypto trading pair on a specific exchange.   The `symbol` parameter expects the format `PAIR@exchange` (e.g. `BTCUSDT@binance`).  - Requires authentication and subscription with historical access. - `hours` parameter: Maximum 48 (last 48 hours).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_extended_minute_history(symbol, hours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading pair and exchange in the format `PAIR@exchange` (e.g. `BTCUSDT@binance`).  (required)
        :param int hours: Number of hours of minute-level data to return (max 48).  (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_extended_minute_history_with_http_info(symbol, hours, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_extended_minute_history_with_http_info(symbol, hours, **kwargs)  # noqa: E501
            return data

    def get_crypto_extended_minute_history_with_http_info(self, symbol, hours, **kwargs):  # noqa: E501
        """Get intraday (minute-level) price history for a specific crypto pair on an exchange  # noqa: E501

        Returns minute-level price history (close prices and timestamps) for a single crypto trading pair on a specific exchange.   The `symbol` parameter expects the format `PAIR@exchange` (e.g. `BTCUSDT@binance`).  - Requires authentication and subscription with historical access. - `hours` parameter: Maximum 48 (last 48 hours).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_extended_minute_history_with_http_info(symbol, hours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading pair and exchange in the format `PAIR@exchange` (e.g. `BTCUSDT@binance`).  (required)
        :param int hours: Number of hours of minute-level data to return (max 48).  (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_extended_minute_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_extended_minute_history`")  # noqa: E501
        # verify the required parameter 'hours' is set
        if ('hours' not in params or
                params['hours'] is None):
            raise ValueError("Missing the required parameter `hours` when calling `get_crypto_extended_minute_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'hours' in params:
            query_params.append(('hours', params['hours']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-extended-history-1m', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_history(self, symbol, period, **kwargs):  # noqa: E501
        """Get historical close prices for a cryptocurrency  # noqa: E501

        Returns the daily closing price history for a single cryptocurrency symbol for up to 5 years (max 1825 days). Requires authentication and a subscription with historical access.  The `symbol` parameter accepts a single cryptocurrency code (e.g., `XRP`, `BTC`, `ETH`).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_history(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The cryptocurrency symbol (e.g. XRP, BTC, ETH). (required)
        :param int period: Number of daily data points to return (up to 1825; 5 years).  (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_history_with_http_info(symbol, period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_history_with_http_info(symbol, period, **kwargs)  # noqa: E501
            return data

    def get_crypto_history_with_http_info(self, symbol, period, **kwargs):  # noqa: E501
        """Get historical close prices for a cryptocurrency  # noqa: E501

        Returns the daily closing price history for a single cryptocurrency symbol for up to 5 years (max 1825 days). Requires authentication and a subscription with historical access.  The `symbol` parameter accepts a single cryptocurrency code (e.g., `XRP`, `BTC`, `ETH`).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_history_with_http_info(symbol, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The cryptocurrency symbol (e.g. XRP, BTC, ETH). (required)
        :param int period: Number of daily data points to return (up to 1825; 5 years).  (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_history`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `get_crypto_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_live(self, symbol, **kwargs):  # noqa: E501
        """Get live data for one or more cryptocurrencies  # noqa: E501

        Returns the latest price and daily metrics for one or more cryptocurrencies. Requires authentication and a subscription with crypto access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: One or more cryptocurrency symbols, separated by commas (e.g. `BTC,ETH,XRP`)  (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_live_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_live_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def get_crypto_live_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Get live data for one or more cryptocurrencies  # noqa: E501

        Returns the latest price and daily metrics for one or more cryptocurrencies. Requires authentication and a subscription with crypto access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: One or more cryptocurrency symbols, separated by commas (e.g. `BTC,ETH,XRP`)  (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_live" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_live`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_live_by_exchange(self, exchange, **kwargs):  # noqa: E501
        """Get live crypto data for all pairs from a specific exchange  # noqa: E501

        Returns the latest live data for all cryptocurrency pairs from a specified exchange (market). Requires authentication and an appropriate subscription with on-chain access.  **The `exchange` parameter is required.**   For example: `binance`, `bybit`, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live_by_exchange(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The market or exchange to get all pairs from (e.g. `binance`, `bybit`, etc.).  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_live_by_exchange_with_http_info(exchange, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_live_by_exchange_with_http_info(exchange, **kwargs)  # noqa: E501
            return data

    def get_crypto_live_by_exchange_with_http_info(self, exchange, **kwargs):  # noqa: E501
        """Get live crypto data for all pairs from a specific exchange  # noqa: E501

        Returns the latest live data for all cryptocurrency pairs from a specified exchange (market). Requires authentication and an appropriate subscription with on-chain access.  **The `exchange` parameter is required.**   For example: `binance`, `bybit`, etc.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live_by_exchange_with_http_info(exchange, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exchange: The market or exchange to get all pairs from (e.g. `binance`, `bybit`, etc.).  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_live_by_exchange" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange' is set
        if ('exchange' not in params or
                params['exchange'] is None):
            raise ValueError("Missing the required parameter `exchange` when calling `get_crypto_live_by_exchange`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exchange' in params:
            query_params.append(('exchange', params['exchange']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-live-exchange', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_live_extended(self, symbol, **kwargs):  # noqa: E501
        """Get extended live data for one or more crypto pairs from specific exchanges  # noqa: E501

        Returns the latest extended data for one or more cryptocurrency pairs from specific exchanges or markets. Requires authentication and a subscription with crypto access.  The `symbol` parameter accepts one or more pair-market combinations, separated by commas. - Example: `BTCUSDT@binance,XRPUSDT@bybit`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live_extended(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: One or more cryptocurrency pairs (with market), separated by commas.   Format: `PAIR@market`, e.g. `BTCUSDT@binance,XRPUSDT@bybit`  (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_live_extended_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_live_extended_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def get_crypto_live_extended_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Get extended live data for one or more crypto pairs from specific exchanges  # noqa: E501

        Returns the latest extended data for one or more cryptocurrency pairs from specific exchanges or markets. Requires authentication and a subscription with crypto access.  The `symbol` parameter accepts one or more pair-market combinations, separated by commas. - Example: `BTCUSDT@binance,XRPUSDT@bybit`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_live_extended_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: One or more cryptocurrency pairs (with market), separated by commas.   Format: `PAIR@market`, e.g. `BTCUSDT@binance,XRPUSDT@bybit`  (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_live_extended" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_live_extended`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-live-extended', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_market_fear_greed_index(self, **kwargs):  # noqa: E501
        """Get Crypto Market Fear & Greed Index  # noqa: E501

        Returns the daily crypto market Fear & Greed Index as a time series from 2021-04-10 to today. Authentication and on-chain access subscription required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_market_fear_greed_index(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_market_fear_greed_index_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_market_fear_greed_index_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_crypto_market_fear_greed_index_with_http_info(self, **kwargs):  # noqa: E501
        """Get Crypto Market Fear & Greed Index  # noqa: E501

        Returns the daily crypto market Fear & Greed Index as a time series from 2021-04-10 to today. Authentication and on-chain access subscription required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_market_fear_greed_index_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_market_fear_greed_index" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-fg', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_minute_history(self, symbol, hours, **kwargs):  # noqa: E501
        """Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)  # noqa: E501

        Returns the 1-minute interval closing price history for a single cryptocurrency symbol for up to 48 hours. Requires authentication and a subscription with historical access.  - `symbol` parameter accepts a single cryptocurrency code (e.g., `ETH`, `BTC`). - `hours` parameter is required, integer, max 48.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_minute_history(symbol, hours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The cryptocurrency symbol (e.g. ETH, BTC, XRP). (required)
        :param int hours: Number of hours of minute-level historical data to return (up to 48 hours back).  (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_minute_history_with_http_info(symbol, hours, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_minute_history_with_http_info(symbol, hours, **kwargs)  # noqa: E501
            return data

    def get_crypto_minute_history_with_http_info(self, symbol, hours, **kwargs):  # noqa: E501
        """Get 1-minute historical close prices for a cryptocurrency (up to 48 hours)  # noqa: E501

        Returns the 1-minute interval closing price history for a single cryptocurrency symbol for up to 48 hours. Requires authentication and a subscription with historical access.  - `symbol` parameter accepts a single cryptocurrency code (e.g., `ETH`, `BTC`). - `hours` parameter is required, integer, max 48.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_minute_history_with_http_info(symbol, hours, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: The cryptocurrency symbol (e.g. ETH, BTC, XRP). (required)
        :param int hours: Number of hours of minute-level historical data to return (up to 48 hours back).  (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_minute_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_minute_history`")  # noqa: E501
        # verify the required parameter 'hours' is set
        if ('hours' not in params or
                params['hours'] is None):
            raise ValueError("Missing the required parameter `hours` when calling `get_crypto_minute_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'hours' in params:
            query_params.append(('hours', params['hours']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-history-1m', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_onchain_metrics(self, type, **kwargs):  # noqa: E501
        """Get on-chain metrics for Bitcoin and crypto markets  # noqa: E501

        Returns daily on-chain indicators as time series for Bitcoin and major crypto assets.   The `type` parameter selects the indicator to retrieve (e.g. whale flows, SOPR, Puell Multiple, MVRV, open interest, leverage, funding, active address ratio).  **Available types:**   - whale   - sopr   - puell   - mvrv   - open_interest   - leverage   - funding   - active_address  Requires authentication and subscription with on-chain access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_onchain_metrics(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of on-chain metric to fetch (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_onchain_metrics_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_onchain_metrics_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_crypto_onchain_metrics_with_http_info(self, type, **kwargs):  # noqa: E501
        """Get on-chain metrics for Bitcoin and crypto markets  # noqa: E501

        Returns daily on-chain indicators as time series for Bitcoin and major crypto assets.   The `type` parameter selects the indicator to retrieve (e.g. whale flows, SOPR, Puell Multiple, MVRV, open interest, leverage, funding, active address ratio).  **Available types:**   - whale   - sopr   - puell   - mvrv   - open_interest   - leverage   - funding   - active_address  Requires authentication and subscription with on-chain access.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_onchain_metrics_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of on-chain metric to fetch (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_onchain_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_crypto_onchain_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-onchain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crypto_performance(self, symbol, **kwargs):  # noqa: E501
        """Get performance of a single cryptocurrency over various periods  # noqa: E501

        Returns the percentage change in price for a specified cryptocurrency (e.g., BTC, ETH) over several timeframes, including 1d, 7d, 15d, 30d, 90d, 180d, 270d, 365d, and 720d.   Authentication and a subscription with crypto performance access are required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_performance(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Cryptocurrency symbol (e.g., BTC, ETH, XRP) (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crypto_performance_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crypto_performance_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def get_crypto_performance_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Get performance of a single cryptocurrency over various periods  # noqa: E501

        Returns the percentage change in price for a specified cryptocurrency (e.g., BTC, ETH) over several timeframes, including 1d, 7d, 15d, 30d, 90d, 180d, 270d, 365d, and 720d.   Authentication and a subscription with crypto performance access are required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crypto_performance_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Cryptocurrency symbol (e.g., BTC, ETH, XRP) (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crypto_performance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `get_crypto_performance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/crypto-performance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
