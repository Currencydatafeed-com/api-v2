# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'percentage_change_1h': 'float',
        'percentage_change_4h': 'float',
        'percentage_change_1d': 'float',
        'percentage_change_7d': 'float',
        'percentage_change_30d': 'float',
        'percentage_change_90d': 'float',
        'percentage_change_180d': 'float',
        'percentage_change_270d': 'float',
        'percentage_change_365d': 'float',
        'percentage_change_720d': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'percentage_change_1h': 'PercentageChange_1h',
        'percentage_change_4h': 'PercentageChange_4h',
        'percentage_change_1d': 'PercentageChange_1d',
        'percentage_change_7d': 'PercentageChange_7d',
        'percentage_change_30d': 'PercentageChange_30d',
        'percentage_change_90d': 'PercentageChange_90d',
        'percentage_change_180d': 'PercentageChange_180d',
        'percentage_change_270d': 'PercentageChange_270d',
        'percentage_change_365d': 'PercentageChange_365d',
        'percentage_change_720d': 'PercentageChange_720d'
    }

    def __init__(self, symbol=None, percentage_change_1h=None, percentage_change_4h=None, percentage_change_1d=None, percentage_change_7d=None, percentage_change_30d=None, percentage_change_90d=None, percentage_change_180d=None, percentage_change_270d=None, percentage_change_365d=None, percentage_change_720d=None):  # noqa: E501
        """InlineResponse2004Data - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._percentage_change_1h = None
        self._percentage_change_4h = None
        self._percentage_change_1d = None
        self._percentage_change_7d = None
        self._percentage_change_30d = None
        self._percentage_change_90d = None
        self._percentage_change_180d = None
        self._percentage_change_270d = None
        self._percentage_change_365d = None
        self._percentage_change_720d = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if percentage_change_1h is not None:
            self.percentage_change_1h = percentage_change_1h
        if percentage_change_4h is not None:
            self.percentage_change_4h = percentage_change_4h
        if percentage_change_1d is not None:
            self.percentage_change_1d = percentage_change_1d
        if percentage_change_7d is not None:
            self.percentage_change_7d = percentage_change_7d
        if percentage_change_30d is not None:
            self.percentage_change_30d = percentage_change_30d
        if percentage_change_90d is not None:
            self.percentage_change_90d = percentage_change_90d
        if percentage_change_180d is not None:
            self.percentage_change_180d = percentage_change_180d
        if percentage_change_270d is not None:
            self.percentage_change_270d = percentage_change_270d
        if percentage_change_365d is not None:
            self.percentage_change_365d = percentage_change_365d
        if percentage_change_720d is not None:
            self.percentage_change_720d = percentage_change_720d

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2004Data.  # noqa: E501

        Symbol queried  # noqa: E501

        :return: The symbol of this InlineResponse2004Data.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2004Data.

        Symbol queried  # noqa: E501

        :param symbol: The symbol of this InlineResponse2004Data.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def percentage_change_1h(self):
        """Gets the percentage_change_1h of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 1 hour  # noqa: E501

        :return: The percentage_change_1h of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_1h

    @percentage_change_1h.setter
    def percentage_change_1h(self, percentage_change_1h):
        """Sets the percentage_change_1h of this InlineResponse2004Data.

        Percentage change in the last 1 hour  # noqa: E501

        :param percentage_change_1h: The percentage_change_1h of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_1h = percentage_change_1h

    @property
    def percentage_change_4h(self):
        """Gets the percentage_change_4h of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 4 hours  # noqa: E501

        :return: The percentage_change_4h of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_4h

    @percentage_change_4h.setter
    def percentage_change_4h(self, percentage_change_4h):
        """Sets the percentage_change_4h of this InlineResponse2004Data.

        Percentage change in the last 4 hours  # noqa: E501

        :param percentage_change_4h: The percentage_change_4h of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_4h = percentage_change_4h

    @property
    def percentage_change_1d(self):
        """Gets the percentage_change_1d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 1 day  # noqa: E501

        :return: The percentage_change_1d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_1d

    @percentage_change_1d.setter
    def percentage_change_1d(self, percentage_change_1d):
        """Sets the percentage_change_1d of this InlineResponse2004Data.

        Percentage change in the last 1 day  # noqa: E501

        :param percentage_change_1d: The percentage_change_1d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_1d = percentage_change_1d

    @property
    def percentage_change_7d(self):
        """Gets the percentage_change_7d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 7 days  # noqa: E501

        :return: The percentage_change_7d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_7d

    @percentage_change_7d.setter
    def percentage_change_7d(self, percentage_change_7d):
        """Sets the percentage_change_7d of this InlineResponse2004Data.

        Percentage change in the last 7 days  # noqa: E501

        :param percentage_change_7d: The percentage_change_7d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_7d = percentage_change_7d

    @property
    def percentage_change_30d(self):
        """Gets the percentage_change_30d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 30 days  # noqa: E501

        :return: The percentage_change_30d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_30d

    @percentage_change_30d.setter
    def percentage_change_30d(self, percentage_change_30d):
        """Sets the percentage_change_30d of this InlineResponse2004Data.

        Percentage change in the last 30 days  # noqa: E501

        :param percentage_change_30d: The percentage_change_30d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_30d = percentage_change_30d

    @property
    def percentage_change_90d(self):
        """Gets the percentage_change_90d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 90 days  # noqa: E501

        :return: The percentage_change_90d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_90d

    @percentage_change_90d.setter
    def percentage_change_90d(self, percentage_change_90d):
        """Sets the percentage_change_90d of this InlineResponse2004Data.

        Percentage change in the last 90 days  # noqa: E501

        :param percentage_change_90d: The percentage_change_90d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_90d = percentage_change_90d

    @property
    def percentage_change_180d(self):
        """Gets the percentage_change_180d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 180 days  # noqa: E501

        :return: The percentage_change_180d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_180d

    @percentage_change_180d.setter
    def percentage_change_180d(self, percentage_change_180d):
        """Sets the percentage_change_180d of this InlineResponse2004Data.

        Percentage change in the last 180 days  # noqa: E501

        :param percentage_change_180d: The percentage_change_180d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_180d = percentage_change_180d

    @property
    def percentage_change_270d(self):
        """Gets the percentage_change_270d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 270 days  # noqa: E501

        :return: The percentage_change_270d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_270d

    @percentage_change_270d.setter
    def percentage_change_270d(self, percentage_change_270d):
        """Sets the percentage_change_270d of this InlineResponse2004Data.

        Percentage change in the last 270 days  # noqa: E501

        :param percentage_change_270d: The percentage_change_270d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_270d = percentage_change_270d

    @property
    def percentage_change_365d(self):
        """Gets the percentage_change_365d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 365 days  # noqa: E501

        :return: The percentage_change_365d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_365d

    @percentage_change_365d.setter
    def percentage_change_365d(self, percentage_change_365d):
        """Sets the percentage_change_365d of this InlineResponse2004Data.

        Percentage change in the last 365 days  # noqa: E501

        :param percentage_change_365d: The percentage_change_365d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_365d = percentage_change_365d

    @property
    def percentage_change_720d(self):
        """Gets the percentage_change_720d of this InlineResponse2004Data.  # noqa: E501

        Percentage change in the last 720 days  # noqa: E501

        :return: The percentage_change_720d of this InlineResponse2004Data.  # noqa: E501
        :rtype: float
        """
        return self._percentage_change_720d

    @percentage_change_720d.setter
    def percentage_change_720d(self, percentage_change_720d):
        """Sets the percentage_change_720d of this InlineResponse2004Data.

        Percentage change in the last 720 days  # noqa: E501

        :param percentage_change_720d: The percentage_change_720d of this InlineResponse2004Data.  # noqa: E501
        :type: float
        """

        self._percentage_change_720d = percentage_change_720d

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
