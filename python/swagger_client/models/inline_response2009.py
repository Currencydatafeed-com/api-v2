# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2009(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'macd_data': 'list[InlineResponse2009MacdData]',
        'rsi_data': 'list[InlineResponse2009RsiData]',
        'technical_data': 'list[InlineResponse2009TechnicalData]',
        'sembol': 'str',
        'error': 'str'
    }

    attribute_map = {
        'success': 'success',
        'macd_data': 'macd_data',
        'rsi_data': 'rsi_data',
        'technical_data': 'technical_data',
        'sembol': 'sembol',
        'error': 'error'
    }

    def __init__(self, success=None, macd_data=None, rsi_data=None, technical_data=None, sembol=None, error=None):  # noqa: E501
        """InlineResponse2009 - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._macd_data = None
        self._rsi_data = None
        self._technical_data = None
        self._sembol = None
        self._error = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if macd_data is not None:
            self.macd_data = macd_data
        if rsi_data is not None:
            self.rsi_data = rsi_data
        if technical_data is not None:
            self.technical_data = technical_data
        if sembol is not None:
            self.sembol = sembol
        if error is not None:
            self.error = error

    @property
    def success(self):
        """Gets the success of this InlineResponse2009.  # noqa: E501


        :return: The success of this InlineResponse2009.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this InlineResponse2009.


        :param success: The success of this InlineResponse2009.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def macd_data(self):
        """Gets the macd_data of this InlineResponse2009.  # noqa: E501


        :return: The macd_data of this InlineResponse2009.  # noqa: E501
        :rtype: list[InlineResponse2009MacdData]
        """
        return self._macd_data

    @macd_data.setter
    def macd_data(self, macd_data):
        """Sets the macd_data of this InlineResponse2009.


        :param macd_data: The macd_data of this InlineResponse2009.  # noqa: E501
        :type: list[InlineResponse2009MacdData]
        """

        self._macd_data = macd_data

    @property
    def rsi_data(self):
        """Gets the rsi_data of this InlineResponse2009.  # noqa: E501


        :return: The rsi_data of this InlineResponse2009.  # noqa: E501
        :rtype: list[InlineResponse2009RsiData]
        """
        return self._rsi_data

    @rsi_data.setter
    def rsi_data(self, rsi_data):
        """Sets the rsi_data of this InlineResponse2009.


        :param rsi_data: The rsi_data of this InlineResponse2009.  # noqa: E501
        :type: list[InlineResponse2009RsiData]
        """

        self._rsi_data = rsi_data

    @property
    def technical_data(self):
        """Gets the technical_data of this InlineResponse2009.  # noqa: E501


        :return: The technical_data of this InlineResponse2009.  # noqa: E501
        :rtype: list[InlineResponse2009TechnicalData]
        """
        return self._technical_data

    @technical_data.setter
    def technical_data(self, technical_data):
        """Sets the technical_data of this InlineResponse2009.


        :param technical_data: The technical_data of this InlineResponse2009.  # noqa: E501
        :type: list[InlineResponse2009TechnicalData]
        """

        self._technical_data = technical_data

    @property
    def sembol(self):
        """Gets the sembol of this InlineResponse2009.  # noqa: E501

        The symbol queried  # noqa: E501

        :return: The sembol of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._sembol

    @sembol.setter
    def sembol(self, sembol):
        """Sets the sembol of this InlineResponse2009.

        The symbol queried  # noqa: E501

        :param sembol: The sembol of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._sembol = sembol

    @property
    def error(self):
        """Gets the error of this InlineResponse2009.  # noqa: E501

        Error message, if any  # noqa: E501

        :return: The error of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse2009.

        Error message, if any  # noqa: E501

        :param error: The error of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
