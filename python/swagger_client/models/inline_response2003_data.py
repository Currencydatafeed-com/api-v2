# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'amount': 'float',
        'rate': 'float',
        'conversion_result': 'float',
        '_date': 'datetime',
        'error': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'amount': 'amount',
        'rate': 'rate',
        'conversion_result': 'conversion_result',
        '_date': 'date',
        'error': 'error'
    }

    def __init__(self, _from=None, to=None, amount=None, rate=None, conversion_result=None, _date=None, error=None):  # noqa: E501
        """InlineResponse2003Data - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._amount = None
        self._rate = None
        self._conversion_result = None
        self.__date = None
        self._error = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if amount is not None:
            self.amount = amount
        if rate is not None:
            self.rate = rate
        if conversion_result is not None:
            self.conversion_result = conversion_result
        if _date is not None:
            self._date = _date
        if error is not None:
            self.error = error

    @property
    def _from(self):
        """Gets the _from of this InlineResponse2003Data.  # noqa: E501

        Source currency code  # noqa: E501

        :return: The _from of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InlineResponse2003Data.

        Source currency code  # noqa: E501

        :param _from: The _from of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this InlineResponse2003Data.  # noqa: E501

        Target currency code  # noqa: E501

        :return: The to of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InlineResponse2003Data.

        Target currency code  # noqa: E501

        :param to: The to of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def amount(self):
        """Gets the amount of this InlineResponse2003Data.  # noqa: E501

        Amount to convert  # noqa: E501

        :return: The amount of this InlineResponse2003Data.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse2003Data.

        Amount to convert  # noqa: E501

        :param amount: The amount of this InlineResponse2003Data.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def rate(self):
        """Gets the rate of this InlineResponse2003Data.  # noqa: E501

        Conversion rate applied  # noqa: E501

        :return: The rate of this InlineResponse2003Data.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this InlineResponse2003Data.

        Conversion rate applied  # noqa: E501

        :param rate: The rate of this InlineResponse2003Data.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def conversion_result(self):
        """Gets the conversion_result of this InlineResponse2003Data.  # noqa: E501

        Result of the conversion (amount * rate)  # noqa: E501

        :return: The conversion_result of this InlineResponse2003Data.  # noqa: E501
        :rtype: float
        """
        return self._conversion_result

    @conversion_result.setter
    def conversion_result(self, conversion_result):
        """Sets the conversion_result of this InlineResponse2003Data.

        Result of the conversion (amount * rate)  # noqa: E501

        :param conversion_result: The conversion_result of this InlineResponse2003Data.  # noqa: E501
        :type: float
        """

        self._conversion_result = conversion_result

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2003Data.  # noqa: E501

        Rate date/time used for conversion  # noqa: E501

        :return: The _date of this InlineResponse2003Data.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2003Data.

        Rate date/time used for conversion  # noqa: E501

        :param _date: The _date of this InlineResponse2003Data.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def error(self):
        """Gets the error of this InlineResponse2003Data.  # noqa: E501

        Error message (present only if no data is available)  # noqa: E501

        :return: The error of this InlineResponse2003Data.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse2003Data.

        Error message (present only if no data is available)  # noqa: E501

        :param error: The error of this InlineResponse2003Data.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
