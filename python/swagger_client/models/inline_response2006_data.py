# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2006Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'type': 'str',
        'history': 'list[InlineResponse2006History]',
        'error': 'str'
    }

    attribute_map = {
        'currency': 'currency',
        'type': 'type',
        'history': 'history',
        'error': 'error'
    }

    def __init__(self, currency=None, type=None, history=None, error=None):  # noqa: E501
        """InlineResponse2006Data - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._type = None
        self._history = None
        self._error = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if type is not None:
            self.type = type
        if history is not None:
            self.history = history
        if error is not None:
            self.error = error

    @property
    def currency(self):
        """Gets the currency of this InlineResponse2006Data.  # noqa: E501

        Queried or reversed pair symbol  # noqa: E501

        :return: The currency of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse2006Data.

        Queried or reversed pair symbol  # noqa: E501

        :param currency: The currency of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this InlineResponse2006Data.  # noqa: E501

        Data type (\"original\" or \"reversed\")  # noqa: E501

        :return: The type of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2006Data.

        Data type (\"original\" or \"reversed\")  # noqa: E501

        :param type: The type of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def history(self):
        """Gets the history of this InlineResponse2006Data.  # noqa: E501

        Array of OHLC objects for the range  # noqa: E501

        :return: The history of this InlineResponse2006Data.  # noqa: E501
        :rtype: list[InlineResponse2006History]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this InlineResponse2006Data.

        Array of OHLC objects for the range  # noqa: E501

        :param history: The history of this InlineResponse2006Data.  # noqa: E501
        :type: list[InlineResponse2006History]
        """

        self._history = history

    @property
    def error(self):
        """Gets the error of this InlineResponse2006Data.  # noqa: E501

        Error message if no data is available  # noqa: E501

        :return: The error of this InlineResponse2006Data.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse2006Data.

        Error message if no data is available  # noqa: E501

        :param error: The error of this InlineResponse2006Data.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
