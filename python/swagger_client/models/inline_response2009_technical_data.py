# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2009TechnicalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'sma_10': 'float',
        'sma_20': 'float',
        'sma_50': 'float',
        'sma_100': 'float',
        'sma_200': 'float',
        'ema_12': 'float',
        'ema_26': 'float',
        'ema_50': 'float',
        'stochastic_k': 'float',
        'stochastic_d': 'float',
        'adx': 'float',
        'cci': 'float',
        'williams_r': 'float'
    }

    attribute_map = {
        '_date': 'date',
        'sma_10': 'sma_10',
        'sma_20': 'sma_20',
        'sma_50': 'sma_50',
        'sma_100': 'sma_100',
        'sma_200': 'sma_200',
        'ema_12': 'ema_12',
        'ema_26': 'ema_26',
        'ema_50': 'ema_50',
        'stochastic_k': 'stochastic_k',
        'stochastic_d': 'stochastic_d',
        'adx': 'adx',
        'cci': 'cci',
        'williams_r': 'williams_r'
    }

    def __init__(self, _date=None, sma_10=None, sma_20=None, sma_50=None, sma_100=None, sma_200=None, ema_12=None, ema_26=None, ema_50=None, stochastic_k=None, stochastic_d=None, adx=None, cci=None, williams_r=None):  # noqa: E501
        """InlineResponse2009TechnicalData - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._sma_10 = None
        self._sma_20 = None
        self._sma_50 = None
        self._sma_100 = None
        self._sma_200 = None
        self._ema_12 = None
        self._ema_26 = None
        self._ema_50 = None
        self._stochastic_k = None
        self._stochastic_d = None
        self._adx = None
        self._cci = None
        self._williams_r = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if sma_10 is not None:
            self.sma_10 = sma_10
        if sma_20 is not None:
            self.sma_20 = sma_20
        if sma_50 is not None:
            self.sma_50 = sma_50
        if sma_100 is not None:
            self.sma_100 = sma_100
        if sma_200 is not None:
            self.sma_200 = sma_200
        if ema_12 is not None:
            self.ema_12 = ema_12
        if ema_26 is not None:
            self.ema_26 = ema_26
        if ema_50 is not None:
            self.ema_50 = ema_50
        if stochastic_k is not None:
            self.stochastic_k = stochastic_k
        if stochastic_d is not None:
            self.stochastic_d = stochastic_d
        if adx is not None:
            self.adx = adx
        if cci is not None:
            self.cci = cci
        if williams_r is not None:
            self.williams_r = williams_r

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The _date of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2009TechnicalData.


        :param _date: The _date of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def sma_10(self):
        """Gets the sma_10 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The sma_10 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._sma_10

    @sma_10.setter
    def sma_10(self, sma_10):
        """Sets the sma_10 of this InlineResponse2009TechnicalData.


        :param sma_10: The sma_10 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._sma_10 = sma_10

    @property
    def sma_20(self):
        """Gets the sma_20 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The sma_20 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._sma_20

    @sma_20.setter
    def sma_20(self, sma_20):
        """Sets the sma_20 of this InlineResponse2009TechnicalData.


        :param sma_20: The sma_20 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._sma_20 = sma_20

    @property
    def sma_50(self):
        """Gets the sma_50 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The sma_50 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._sma_50

    @sma_50.setter
    def sma_50(self, sma_50):
        """Sets the sma_50 of this InlineResponse2009TechnicalData.


        :param sma_50: The sma_50 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._sma_50 = sma_50

    @property
    def sma_100(self):
        """Gets the sma_100 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The sma_100 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._sma_100

    @sma_100.setter
    def sma_100(self, sma_100):
        """Sets the sma_100 of this InlineResponse2009TechnicalData.


        :param sma_100: The sma_100 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._sma_100 = sma_100

    @property
    def sma_200(self):
        """Gets the sma_200 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The sma_200 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._sma_200

    @sma_200.setter
    def sma_200(self, sma_200):
        """Sets the sma_200 of this InlineResponse2009TechnicalData.


        :param sma_200: The sma_200 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._sma_200 = sma_200

    @property
    def ema_12(self):
        """Gets the ema_12 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The ema_12 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._ema_12

    @ema_12.setter
    def ema_12(self, ema_12):
        """Sets the ema_12 of this InlineResponse2009TechnicalData.


        :param ema_12: The ema_12 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._ema_12 = ema_12

    @property
    def ema_26(self):
        """Gets the ema_26 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The ema_26 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._ema_26

    @ema_26.setter
    def ema_26(self, ema_26):
        """Sets the ema_26 of this InlineResponse2009TechnicalData.


        :param ema_26: The ema_26 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._ema_26 = ema_26

    @property
    def ema_50(self):
        """Gets the ema_50 of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The ema_50 of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._ema_50

    @ema_50.setter
    def ema_50(self, ema_50):
        """Sets the ema_50 of this InlineResponse2009TechnicalData.


        :param ema_50: The ema_50 of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._ema_50 = ema_50

    @property
    def stochastic_k(self):
        """Gets the stochastic_k of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The stochastic_k of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._stochastic_k

    @stochastic_k.setter
    def stochastic_k(self, stochastic_k):
        """Sets the stochastic_k of this InlineResponse2009TechnicalData.


        :param stochastic_k: The stochastic_k of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._stochastic_k = stochastic_k

    @property
    def stochastic_d(self):
        """Gets the stochastic_d of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The stochastic_d of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._stochastic_d

    @stochastic_d.setter
    def stochastic_d(self, stochastic_d):
        """Sets the stochastic_d of this InlineResponse2009TechnicalData.


        :param stochastic_d: The stochastic_d of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._stochastic_d = stochastic_d

    @property
    def adx(self):
        """Gets the adx of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The adx of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._adx

    @adx.setter
    def adx(self, adx):
        """Sets the adx of this InlineResponse2009TechnicalData.


        :param adx: The adx of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._adx = adx

    @property
    def cci(self):
        """Gets the cci of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The cci of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._cci

    @cci.setter
    def cci(self, cci):
        """Sets the cci of this InlineResponse2009TechnicalData.


        :param cci: The cci of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._cci = cci

    @property
    def williams_r(self):
        """Gets the williams_r of this InlineResponse2009TechnicalData.  # noqa: E501


        :return: The williams_r of this InlineResponse2009TechnicalData.  # noqa: E501
        :rtype: float
        """
        return self._williams_r

    @williams_r.setter
    def williams_r(self, williams_r):
        """Sets the williams_r of this InlineResponse2009TechnicalData.


        :param williams_r: The williams_r of this InlineResponse2009TechnicalData.  # noqa: E501
        :type: float
        """

        self._williams_r = williams_r

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009TechnicalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009TechnicalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
