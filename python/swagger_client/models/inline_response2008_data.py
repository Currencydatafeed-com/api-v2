# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'pivot': 'float',
        'resistance1': 'float',
        'support1': 'float',
        'resistance2': 'float',
        'support2': 'float',
        'resistance3': 'float',
        'support3': 'float',
        'bollinger_upper': 'float',
        'bollinger_lower': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'pivot': 'pivot',
        'resistance1': 'resistance1',
        'support1': 'support1',
        'resistance2': 'resistance2',
        'support2': 'support2',
        'resistance3': 'resistance3',
        'support3': 'support3',
        'bollinger_upper': 'bollinger_upper',
        'bollinger_lower': 'bollinger_lower'
    }

    def __init__(self, symbol=None, pivot=None, resistance1=None, support1=None, resistance2=None, support2=None, resistance3=None, support3=None, bollinger_upper=None, bollinger_lower=None):  # noqa: E501
        """InlineResponse2008Data - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._pivot = None
        self._resistance1 = None
        self._support1 = None
        self._resistance2 = None
        self._support2 = None
        self._resistance3 = None
        self._support3 = None
        self._bollinger_upper = None
        self._bollinger_lower = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if pivot is not None:
            self.pivot = pivot
        if resistance1 is not None:
            self.resistance1 = resistance1
        if support1 is not None:
            self.support1 = support1
        if resistance2 is not None:
            self.resistance2 = resistance2
        if support2 is not None:
            self.support2 = support2
        if resistance3 is not None:
            self.resistance3 = resistance3
        if support3 is not None:
            self.support3 = support3
        if bollinger_upper is not None:
            self.bollinger_upper = bollinger_upper
        if bollinger_lower is not None:
            self.bollinger_lower = bollinger_lower

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2008Data.  # noqa: E501

        The queried symbol  # noqa: E501

        :return: The symbol of this InlineResponse2008Data.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2008Data.

        The queried symbol  # noqa: E501

        :param symbol: The symbol of this InlineResponse2008Data.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def pivot(self):
        """Gets the pivot of this InlineResponse2008Data.  # noqa: E501

        Pivot point  # noqa: E501

        :return: The pivot of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._pivot

    @pivot.setter
    def pivot(self, pivot):
        """Sets the pivot of this InlineResponse2008Data.

        Pivot point  # noqa: E501

        :param pivot: The pivot of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._pivot = pivot

    @property
    def resistance1(self):
        """Gets the resistance1 of this InlineResponse2008Data.  # noqa: E501

        First resistance level  # noqa: E501

        :return: The resistance1 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._resistance1

    @resistance1.setter
    def resistance1(self, resistance1):
        """Sets the resistance1 of this InlineResponse2008Data.

        First resistance level  # noqa: E501

        :param resistance1: The resistance1 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._resistance1 = resistance1

    @property
    def support1(self):
        """Gets the support1 of this InlineResponse2008Data.  # noqa: E501

        First support level  # noqa: E501

        :return: The support1 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._support1

    @support1.setter
    def support1(self, support1):
        """Sets the support1 of this InlineResponse2008Data.

        First support level  # noqa: E501

        :param support1: The support1 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._support1 = support1

    @property
    def resistance2(self):
        """Gets the resistance2 of this InlineResponse2008Data.  # noqa: E501

        Second resistance level  # noqa: E501

        :return: The resistance2 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._resistance2

    @resistance2.setter
    def resistance2(self, resistance2):
        """Sets the resistance2 of this InlineResponse2008Data.

        Second resistance level  # noqa: E501

        :param resistance2: The resistance2 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._resistance2 = resistance2

    @property
    def support2(self):
        """Gets the support2 of this InlineResponse2008Data.  # noqa: E501

        Second support level  # noqa: E501

        :return: The support2 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._support2

    @support2.setter
    def support2(self, support2):
        """Sets the support2 of this InlineResponse2008Data.

        Second support level  # noqa: E501

        :param support2: The support2 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._support2 = support2

    @property
    def resistance3(self):
        """Gets the resistance3 of this InlineResponse2008Data.  # noqa: E501

        Third resistance level  # noqa: E501

        :return: The resistance3 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._resistance3

    @resistance3.setter
    def resistance3(self, resistance3):
        """Sets the resistance3 of this InlineResponse2008Data.

        Third resistance level  # noqa: E501

        :param resistance3: The resistance3 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._resistance3 = resistance3

    @property
    def support3(self):
        """Gets the support3 of this InlineResponse2008Data.  # noqa: E501

        Third support level  # noqa: E501

        :return: The support3 of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._support3

    @support3.setter
    def support3(self, support3):
        """Sets the support3 of this InlineResponse2008Data.

        Third support level  # noqa: E501

        :param support3: The support3 of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._support3 = support3

    @property
    def bollinger_upper(self):
        """Gets the bollinger_upper of this InlineResponse2008Data.  # noqa: E501

        Bollinger Bands upper value (if enough data)  # noqa: E501

        :return: The bollinger_upper of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._bollinger_upper

    @bollinger_upper.setter
    def bollinger_upper(self, bollinger_upper):
        """Sets the bollinger_upper of this InlineResponse2008Data.

        Bollinger Bands upper value (if enough data)  # noqa: E501

        :param bollinger_upper: The bollinger_upper of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._bollinger_upper = bollinger_upper

    @property
    def bollinger_lower(self):
        """Gets the bollinger_lower of this InlineResponse2008Data.  # noqa: E501

        Bollinger Bands lower value (if enough data)  # noqa: E501

        :return: The bollinger_lower of this InlineResponse2008Data.  # noqa: E501
        :rtype: float
        """
        return self._bollinger_lower

    @bollinger_lower.setter
    def bollinger_lower(self, bollinger_lower):
        """Sets the bollinger_lower of this InlineResponse2008Data.

        Bollinger Bands lower value (if enough data)  # noqa: E501

        :param bollinger_lower: The bollinger_lower of this InlineResponse2008Data.  # noqa: E501
        :type: float
        """

        self._bollinger_lower = bollinger_lower

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
