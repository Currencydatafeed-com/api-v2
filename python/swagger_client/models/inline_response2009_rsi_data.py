# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2009RsiData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'rsi': 'float',
        'rsi_signal': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'rsi': 'rsi',
        'rsi_signal': 'rsi_signal'
    }

    def __init__(self, _date=None, rsi=None, rsi_signal=None):  # noqa: E501
        """InlineResponse2009RsiData - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._rsi = None
        self._rsi_signal = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if rsi is not None:
            self.rsi = rsi
        if rsi_signal is not None:
            self.rsi_signal = rsi_signal

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2009RsiData.  # noqa: E501


        :return: The _date of this InlineResponse2009RsiData.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2009RsiData.


        :param _date: The _date of this InlineResponse2009RsiData.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def rsi(self):
        """Gets the rsi of this InlineResponse2009RsiData.  # noqa: E501


        :return: The rsi of this InlineResponse2009RsiData.  # noqa: E501
        :rtype: float
        """
        return self._rsi

    @rsi.setter
    def rsi(self, rsi):
        """Sets the rsi of this InlineResponse2009RsiData.


        :param rsi: The rsi of this InlineResponse2009RsiData.  # noqa: E501
        :type: float
        """

        self._rsi = rsi

    @property
    def rsi_signal(self):
        """Gets the rsi_signal of this InlineResponse2009RsiData.  # noqa: E501

        One of \"oversold\", \"overbought\", \"neutral\"  # noqa: E501

        :return: The rsi_signal of this InlineResponse2009RsiData.  # noqa: E501
        :rtype: str
        """
        return self._rsi_signal

    @rsi_signal.setter
    def rsi_signal(self, rsi_signal):
        """Sets the rsi_signal of this InlineResponse2009RsiData.

        One of \"oversold\", \"overbought\", \"neutral\"  # noqa: E501

        :param rsi_signal: The rsi_signal of this InlineResponse2009RsiData.  # noqa: E501
        :type: str
        """

        self._rsi_signal = rsi_signal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009RsiData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009RsiData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
