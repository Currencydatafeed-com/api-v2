# coding: utf-8

"""
    Currencydatafeed.com API V2

    > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found.   # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'last': 'float',
        'change': 'float',
        'change_percent': 'float',
        'weekly_change': 'float',
        'weekly_change_percent': 'float',
        'monthly_change': 'float',
        'monthly_change_percent': 'float',
        'yearly_change': 'float',
        'yearly_change_percent': 'float',
        'ask': 'float',
        'bid': 'float',
        'daily_lowest': 'float',
        'daily_highest': 'float',
        'open_today': 'float',
        '_date': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'last': 'last',
        'change': 'change',
        'change_percent': 'change_percent',
        'weekly_change': 'weekly_change',
        'weekly_change_percent': 'weekly_change_percent',
        'monthly_change': 'monthly_change',
        'monthly_change_percent': 'monthly_change_percent',
        'yearly_change': 'yearly_change',
        'yearly_change_percent': 'yearly_change_percent',
        'ask': 'ask',
        'bid': 'bid',
        'daily_lowest': 'daily_lowest',
        'daily_highest': 'daily_highest',
        'open_today': 'open_today',
        '_date': 'date'
    }

    def __init__(self, symbol=None, last=None, change=None, change_percent=None, weekly_change=None, weekly_change_percent=None, monthly_change=None, monthly_change_percent=None, yearly_change=None, yearly_change_percent=None, ask=None, bid=None, daily_lowest=None, daily_highest=None, open_today=None, _date=None):  # noqa: E501
        """InlineResponse2001Data - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._last = None
        self._change = None
        self._change_percent = None
        self._weekly_change = None
        self._weekly_change_percent = None
        self._monthly_change = None
        self._monthly_change_percent = None
        self._yearly_change = None
        self._yearly_change_percent = None
        self._ask = None
        self._bid = None
        self._daily_lowest = None
        self._daily_highest = None
        self._open_today = None
        self.__date = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if last is not None:
            self.last = last
        if change is not None:
            self.change = change
        if change_percent is not None:
            self.change_percent = change_percent
        if weekly_change is not None:
            self.weekly_change = weekly_change
        if weekly_change_percent is not None:
            self.weekly_change_percent = weekly_change_percent
        if monthly_change is not None:
            self.monthly_change = monthly_change
        if monthly_change_percent is not None:
            self.monthly_change_percent = monthly_change_percent
        if yearly_change is not None:
            self.yearly_change = yearly_change
        if yearly_change_percent is not None:
            self.yearly_change_percent = yearly_change_percent
        if ask is not None:
            self.ask = ask
        if bid is not None:
            self.bid = bid
        if daily_lowest is not None:
            self.daily_lowest = daily_lowest
        if daily_highest is not None:
            self.daily_highest = daily_highest
        if open_today is not None:
            self.open_today = open_today
        if _date is not None:
            self._date = _date

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2001Data.  # noqa: E501

        Pair symbol (e.g. \"EURUSD\", \"BTCUSD\")  # noqa: E501

        :return: The symbol of this InlineResponse2001Data.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2001Data.

        Pair symbol (e.g. \"EURUSD\", \"BTCUSD\")  # noqa: E501

        :param symbol: The symbol of this InlineResponse2001Data.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def last(self):
        """Gets the last of this InlineResponse2001Data.  # noqa: E501

        Last trade price  # noqa: E501

        :return: The last of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this InlineResponse2001Data.

        Last trade price  # noqa: E501

        :param last: The last of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._last = last

    @property
    def change(self):
        """Gets the change of this InlineResponse2001Data.  # noqa: E501

        Absolute daily change  # noqa: E501

        :return: The change of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this InlineResponse2001Data.

        Absolute daily change  # noqa: E501

        :param change: The change of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def change_percent(self):
        """Gets the change_percent of this InlineResponse2001Data.  # noqa: E501

        Daily change as a percent  # noqa: E501

        :return: The change_percent of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._change_percent

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this InlineResponse2001Data.

        Daily change as a percent  # noqa: E501

        :param change_percent: The change_percent of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._change_percent = change_percent

    @property
    def weekly_change(self):
        """Gets the weekly_change of this InlineResponse2001Data.  # noqa: E501

        Absolute weekly change  # noqa: E501

        :return: The weekly_change of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._weekly_change

    @weekly_change.setter
    def weekly_change(self, weekly_change):
        """Sets the weekly_change of this InlineResponse2001Data.

        Absolute weekly change  # noqa: E501

        :param weekly_change: The weekly_change of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._weekly_change = weekly_change

    @property
    def weekly_change_percent(self):
        """Gets the weekly_change_percent of this InlineResponse2001Data.  # noqa: E501

        Weekly change as a percent  # noqa: E501

        :return: The weekly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._weekly_change_percent

    @weekly_change_percent.setter
    def weekly_change_percent(self, weekly_change_percent):
        """Sets the weekly_change_percent of this InlineResponse2001Data.

        Weekly change as a percent  # noqa: E501

        :param weekly_change_percent: The weekly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._weekly_change_percent = weekly_change_percent

    @property
    def monthly_change(self):
        """Gets the monthly_change of this InlineResponse2001Data.  # noqa: E501

        Absolute monthly change  # noqa: E501

        :return: The monthly_change of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._monthly_change

    @monthly_change.setter
    def monthly_change(self, monthly_change):
        """Sets the monthly_change of this InlineResponse2001Data.

        Absolute monthly change  # noqa: E501

        :param monthly_change: The monthly_change of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._monthly_change = monthly_change

    @property
    def monthly_change_percent(self):
        """Gets the monthly_change_percent of this InlineResponse2001Data.  # noqa: E501

        Monthly change as a percent  # noqa: E501

        :return: The monthly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._monthly_change_percent

    @monthly_change_percent.setter
    def monthly_change_percent(self, monthly_change_percent):
        """Sets the monthly_change_percent of this InlineResponse2001Data.

        Monthly change as a percent  # noqa: E501

        :param monthly_change_percent: The monthly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._monthly_change_percent = monthly_change_percent

    @property
    def yearly_change(self):
        """Gets the yearly_change of this InlineResponse2001Data.  # noqa: E501

        Absolute yearly change  # noqa: E501

        :return: The yearly_change of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._yearly_change

    @yearly_change.setter
    def yearly_change(self, yearly_change):
        """Sets the yearly_change of this InlineResponse2001Data.

        Absolute yearly change  # noqa: E501

        :param yearly_change: The yearly_change of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._yearly_change = yearly_change

    @property
    def yearly_change_percent(self):
        """Gets the yearly_change_percent of this InlineResponse2001Data.  # noqa: E501

        Yearly change as a percent  # noqa: E501

        :return: The yearly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._yearly_change_percent

    @yearly_change_percent.setter
    def yearly_change_percent(self, yearly_change_percent):
        """Sets the yearly_change_percent of this InlineResponse2001Data.

        Yearly change as a percent  # noqa: E501

        :param yearly_change_percent: The yearly_change_percent of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._yearly_change_percent = yearly_change_percent

    @property
    def ask(self):
        """Gets the ask of this InlineResponse2001Data.  # noqa: E501

        Ask price  # noqa: E501

        :return: The ask of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this InlineResponse2001Data.

        Ask price  # noqa: E501

        :param ask: The ask of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def bid(self):
        """Gets the bid of this InlineResponse2001Data.  # noqa: E501

        Bid price  # noqa: E501

        :return: The bid of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this InlineResponse2001Data.

        Bid price  # noqa: E501

        :param bid: The bid of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def daily_lowest(self):
        """Gets the daily_lowest of this InlineResponse2001Data.  # noqa: E501

        Lowest price of the day  # noqa: E501

        :return: The daily_lowest of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._daily_lowest

    @daily_lowest.setter
    def daily_lowest(self, daily_lowest):
        """Sets the daily_lowest of this InlineResponse2001Data.

        Lowest price of the day  # noqa: E501

        :param daily_lowest: The daily_lowest of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._daily_lowest = daily_lowest

    @property
    def daily_highest(self):
        """Gets the daily_highest of this InlineResponse2001Data.  # noqa: E501

        Highest price of the day  # noqa: E501

        :return: The daily_highest of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._daily_highest

    @daily_highest.setter
    def daily_highest(self, daily_highest):
        """Sets the daily_highest of this InlineResponse2001Data.

        Highest price of the day  # noqa: E501

        :param daily_highest: The daily_highest of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._daily_highest = daily_highest

    @property
    def open_today(self):
        """Gets the open_today of this InlineResponse2001Data.  # noqa: E501

        Open price of the day  # noqa: E501

        :return: The open_today of this InlineResponse2001Data.  # noqa: E501
        :rtype: float
        """
        return self._open_today

    @open_today.setter
    def open_today(self, open_today):
        """Sets the open_today of this InlineResponse2001Data.

        Open price of the day  # noqa: E501

        :param open_today: The open_today of this InlineResponse2001Data.  # noqa: E501
        :type: float
        """

        self._open_today = open_today

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2001Data.  # noqa: E501

        Time of the last update (\"YYYY-MM-DD HH:mm:ss\")  # noqa: E501

        :return: The _date of this InlineResponse2001Data.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2001Data.

        Time of the last update (\"YYYY-MM-DD HH:mm:ss\")  # noqa: E501

        :param _date: The _date of this InlineResponse2001Data.  # noqa: E501
        :type: str
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
