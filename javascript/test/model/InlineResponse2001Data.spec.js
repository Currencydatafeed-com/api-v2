/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CurrencydatafeedcomApiV2);
  }
}(this, function(expect, CurrencydatafeedcomApiV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2001Data', function() {
      beforeEach(function() {
        instance = new CurrencydatafeedcomApiV2.InlineResponse2001Data();
      });

      it('should create an instance of InlineResponse2001Data', function() {
        // TODO: update the code to test InlineResponse2001Data
        expect(instance).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2001Data);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property last (base name: "last")', function() {
        // TODO: update the code to test the property last
        expect(instance).to.have.property('last');
        // expect(instance.last).to.be(expectedValueLiteral);
      });

      it('should have the property change (base name: "change")', function() {
        // TODO: update the code to test the property change
        expect(instance).to.have.property('change');
        // expect(instance.change).to.be(expectedValueLiteral);
      });

      it('should have the property changePercent (base name: "change_percent")', function() {
        // TODO: update the code to test the property changePercent
        expect(instance).to.have.property('changePercent');
        // expect(instance.changePercent).to.be(expectedValueLiteral);
      });

      it('should have the property weeklyChange (base name: "weekly_change")', function() {
        // TODO: update the code to test the property weeklyChange
        expect(instance).to.have.property('weeklyChange');
        // expect(instance.weeklyChange).to.be(expectedValueLiteral);
      });

      it('should have the property weeklyChangePercent (base name: "weekly_change_percent")', function() {
        // TODO: update the code to test the property weeklyChangePercent
        expect(instance).to.have.property('weeklyChangePercent');
        // expect(instance.weeklyChangePercent).to.be(expectedValueLiteral);
      });

      it('should have the property monthlyChange (base name: "monthly_change")', function() {
        // TODO: update the code to test the property monthlyChange
        expect(instance).to.have.property('monthlyChange');
        // expect(instance.monthlyChange).to.be(expectedValueLiteral);
      });

      it('should have the property monthlyChangePercent (base name: "monthly_change_percent")', function() {
        // TODO: update the code to test the property monthlyChangePercent
        expect(instance).to.have.property('monthlyChangePercent');
        // expect(instance.monthlyChangePercent).to.be(expectedValueLiteral);
      });

      it('should have the property yearlyChange (base name: "yearly_change")', function() {
        // TODO: update the code to test the property yearlyChange
        expect(instance).to.have.property('yearlyChange');
        // expect(instance.yearlyChange).to.be(expectedValueLiteral);
      });

      it('should have the property yearlyChangePercent (base name: "yearly_change_percent")', function() {
        // TODO: update the code to test the property yearlyChangePercent
        expect(instance).to.have.property('yearlyChangePercent');
        // expect(instance.yearlyChangePercent).to.be(expectedValueLiteral);
      });

      it('should have the property ask (base name: "ask")', function() {
        // TODO: update the code to test the property ask
        expect(instance).to.have.property('ask');
        // expect(instance.ask).to.be(expectedValueLiteral);
      });

      it('should have the property bid (base name: "bid")', function() {
        // TODO: update the code to test the property bid
        expect(instance).to.have.property('bid');
        // expect(instance.bid).to.be(expectedValueLiteral);
      });

      it('should have the property dailyLowest (base name: "daily_lowest")', function() {
        // TODO: update the code to test the property dailyLowest
        expect(instance).to.have.property('dailyLowest');
        // expect(instance.dailyLowest).to.be(expectedValueLiteral);
      });

      it('should have the property dailyHighest (base name: "daily_highest")', function() {
        // TODO: update the code to test the property dailyHighest
        expect(instance).to.have.property('dailyHighest');
        // expect(instance.dailyHighest).to.be(expectedValueLiteral);
      });

      it('should have the property openToday (base name: "open_today")', function() {
        // TODO: update the code to test the property openToday
        expect(instance).to.have.property('openToday');
        // expect(instance.openToday).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

    });
  });

}));
