/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CurrencydatafeedcomApiV2);
  }
}(this, function(expect, CurrencydatafeedcomApiV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2009TechnicalData', function() {
      beforeEach(function() {
        instance = new CurrencydatafeedcomApiV2.InlineResponse2009TechnicalData();
      });

      it('should create an instance of InlineResponse2009TechnicalData', function() {
        // TODO: update the code to test InlineResponse2009TechnicalData
        expect(instance).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2009TechnicalData);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property sma10 (base name: "sma_10")', function() {
        // TODO: update the code to test the property sma10
        expect(instance).to.have.property('sma10');
        // expect(instance.sma10).to.be(expectedValueLiteral);
      });

      it('should have the property sma20 (base name: "sma_20")', function() {
        // TODO: update the code to test the property sma20
        expect(instance).to.have.property('sma20');
        // expect(instance.sma20).to.be(expectedValueLiteral);
      });

      it('should have the property sma50 (base name: "sma_50")', function() {
        // TODO: update the code to test the property sma50
        expect(instance).to.have.property('sma50');
        // expect(instance.sma50).to.be(expectedValueLiteral);
      });

      it('should have the property sma100 (base name: "sma_100")', function() {
        // TODO: update the code to test the property sma100
        expect(instance).to.have.property('sma100');
        // expect(instance.sma100).to.be(expectedValueLiteral);
      });

      it('should have the property sma200 (base name: "sma_200")', function() {
        // TODO: update the code to test the property sma200
        expect(instance).to.have.property('sma200');
        // expect(instance.sma200).to.be(expectedValueLiteral);
      });

      it('should have the property ema12 (base name: "ema_12")', function() {
        // TODO: update the code to test the property ema12
        expect(instance).to.have.property('ema12');
        // expect(instance.ema12).to.be(expectedValueLiteral);
      });

      it('should have the property ema26 (base name: "ema_26")', function() {
        // TODO: update the code to test the property ema26
        expect(instance).to.have.property('ema26');
        // expect(instance.ema26).to.be(expectedValueLiteral);
      });

      it('should have the property ema50 (base name: "ema_50")', function() {
        // TODO: update the code to test the property ema50
        expect(instance).to.have.property('ema50');
        // expect(instance.ema50).to.be(expectedValueLiteral);
      });

      it('should have the property stochasticK (base name: "stochastic_k")', function() {
        // TODO: update the code to test the property stochasticK
        expect(instance).to.have.property('stochasticK');
        // expect(instance.stochasticK).to.be(expectedValueLiteral);
      });

      it('should have the property stochasticD (base name: "stochastic_d")', function() {
        // TODO: update the code to test the property stochasticD
        expect(instance).to.have.property('stochasticD');
        // expect(instance.stochasticD).to.be(expectedValueLiteral);
      });

      it('should have the property adx (base name: "adx")', function() {
        // TODO: update the code to test the property adx
        expect(instance).to.have.property('adx');
        // expect(instance.adx).to.be(expectedValueLiteral);
      });

      it('should have the property cci (base name: "cci")', function() {
        // TODO: update the code to test the property cci
        expect(instance).to.have.property('cci');
        // expect(instance.cci).to.be(expectedValueLiteral);
      });

      it('should have the property williamsR (base name: "williams_r")', function() {
        // TODO: update the code to test the property williamsR
        expect(instance).to.have.property('williamsR');
        // expect(instance.williamsR).to.be(expectedValueLiteral);
      });

    });
  });

}));
