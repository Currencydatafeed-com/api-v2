/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CurrencydatafeedcomApiV2);
  }
}(this, function(expect, CurrencydatafeedcomApiV2) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2004Data', function() {
      beforeEach(function() {
        instance = new CurrencydatafeedcomApiV2.InlineResponse2004Data();
      });

      it('should create an instance of InlineResponse2004Data', function() {
        // TODO: update the code to test InlineResponse2004Data
        expect(instance).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2004Data);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange1h (base name: "PercentageChange_1h")', function() {
        // TODO: update the code to test the property percentageChange1h
        expect(instance).to.have.property('percentageChange1h');
        // expect(instance.percentageChange1h).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange4h (base name: "PercentageChange_4h")', function() {
        // TODO: update the code to test the property percentageChange4h
        expect(instance).to.have.property('percentageChange4h');
        // expect(instance.percentageChange4h).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange1d (base name: "PercentageChange_1d")', function() {
        // TODO: update the code to test the property percentageChange1d
        expect(instance).to.have.property('percentageChange1d');
        // expect(instance.percentageChange1d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange7d (base name: "PercentageChange_7d")', function() {
        // TODO: update the code to test the property percentageChange7d
        expect(instance).to.have.property('percentageChange7d');
        // expect(instance.percentageChange7d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange30d (base name: "PercentageChange_30d")', function() {
        // TODO: update the code to test the property percentageChange30d
        expect(instance).to.have.property('percentageChange30d');
        // expect(instance.percentageChange30d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange90d (base name: "PercentageChange_90d")', function() {
        // TODO: update the code to test the property percentageChange90d
        expect(instance).to.have.property('percentageChange90d');
        // expect(instance.percentageChange90d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange180d (base name: "PercentageChange_180d")', function() {
        // TODO: update the code to test the property percentageChange180d
        expect(instance).to.have.property('percentageChange180d');
        // expect(instance.percentageChange180d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange270d (base name: "PercentageChange_270d")', function() {
        // TODO: update the code to test the property percentageChange270d
        expect(instance).to.have.property('percentageChange270d');
        // expect(instance.percentageChange270d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange365d (base name: "PercentageChange_365d")', function() {
        // TODO: update the code to test the property percentageChange365d
        expect(instance).to.have.property('percentageChange365d');
        // expect(instance.percentageChange365d).to.be(expectedValueLiteral);
      });

      it('should have the property percentageChange720d (base name: "PercentageChange_720d")', function() {
        // TODO: update the code to test the property percentageChange720d
        expect(instance).to.have.property('percentageChange720d');
        // expect(instance.percentageChange720d).to.be(expectedValueLiteral);
      });

    });
  });

}));
