/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CurrencydatafeedcomApiV2);
  }
}(this, function(expect, CurrencydatafeedcomApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CurrencydatafeedcomApiV2.CryptoCurrencyApi();
  });

  describe('(package)', function() {
    describe('CryptoCurrencyApi', function() {
      describe('getCryptoExtendedHistory', function() {
        it('should call getCryptoExtendedHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoExtendedHistory call and complete the assertions
          /*

          instance.getCryptoExtendedHistory(symbol, period, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20015);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoExtendedMinuteHistory', function() {
        it('should call getCryptoExtendedMinuteHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoExtendedMinuteHistory call and complete the assertions
          /*

          instance.getCryptoExtendedMinuteHistory(symbol, hours, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20016);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoHistory', function() {
        it('should call getCryptoHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoHistory call and complete the assertions
          /*

          instance.getCryptoHistory(symbol, period, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20013);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoLive', function() {
        it('should call getCryptoLive successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoLive call and complete the assertions
          /*

          instance.getCryptoLive(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20010);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoLiveByExchange', function() {
        it('should call getCryptoLiveByExchange successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoLiveByExchange call and complete the assertions
          /*

          instance.getCryptoLiveByExchange(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20012);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoLiveExtended', function() {
        it('should call getCryptoLiveExtended successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoLiveExtended call and complete the assertions
          /*

          instance.getCryptoLiveExtended(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20011);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoMarketFearGreedIndex', function() {
        it('should call getCryptoMarketFearGreedIndex successfully', function(done) {
          // TODO: uncomment getCryptoMarketFearGreedIndex call and complete the assertions
          /*

          instance.getCryptoMarketFearGreedIndex(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20018);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoMinuteHistory', function() {
        it('should call getCryptoMinuteHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoMinuteHistory call and complete the assertions
          /*

          instance.getCryptoMinuteHistory(symbol, hours, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20014);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoOnchainMetrics', function() {
        it('should call getCryptoOnchainMetrics successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoOnchainMetrics call and complete the assertions
          /*

          instance.getCryptoOnchainMetrics(type, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20017);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCryptoPerformance', function() {
        it('should call getCryptoPerformance successfully', function(done) {
          // TODO: uncomment, update parameter values for getCryptoPerformance call and complete the assertions
          /*

          instance.getCryptoPerformance(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse20019);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
