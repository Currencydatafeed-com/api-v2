/*
 * Currencydatafeed.com API V2
 * > ðŸ“˜ **Looking for V1 API documentation?**   > Visit: [https://currencydatafeed.com/documentation.php](https://currencydatafeed.com/documentation.php)   A comprehensive data API to retrieve live and historical prices for currency pairs and cryptocurrencies, including technical analysis endpoints and on-chain metrics.  ## Authentication  All endpoints require an API token.  **Recommended:** Send your API token as a Bearer token in the HTTP `Authorization` header:  ``` Authorization: Bearer YOUR_API_TOKEN ```  **Example (cURL):** ```shell curl -H \"Authorization: Bearer YOUR_API_TOKEN\" \\   \"https://currencydatafeed.com/api/v2/live-rates\" ```  **Alternative:** You may also send the token as a `token` query parameter, but this is less secure and not recommended:  ``` https://currencydatafeed.com/api/v2/live-rates?token=YOUR_API_TOKEN ```  > The API first checks the Authorization header, then the `token` parameter if no header is found. 
 *
 * OpenAPI spec version: 2.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CurrencydatafeedcomApiV2);
  }
}(this, function(expect, CurrencydatafeedcomApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CurrencydatafeedcomApiV2.ForexApi();
  });

  describe('(package)', function() {
    describe('ForexApi', function() {
      describe('convertAmount', function() {
        it('should call convertAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for convertAmount call and complete the assertions
          /*

          instance.convertAmount(from, to, amount, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHistoricalOHLC', function() {
        it('should call getHistoricalOHLC successfully', function(done) {
          // TODO: uncomment, update parameter values for getHistoricalOHLC call and complete the assertions
          /*

          instance.getHistoricalOHLC(symbol, _date, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIntradayOHLC', function() {
        it('should call getIntradayOHLC successfully', function(done) {
          // TODO: uncomment, update parameter values for getIntradayOHLC call and complete the assertions
          /*
          var opts = {};

          instance.getIntradayOHLC(symbol, interval, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2007);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLevels', function() {
        it('should call getLevels successfully', function(done) {
          // TODO: uncomment, update parameter values for getLevels call and complete the assertions
          /*

          instance.getLevels(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLiveRates', function() {
        it('should call getLiveRates successfully', function(done) {
          // TODO: uncomment, update parameter values for getLiveRates call and complete the assertions
          /*
          var opts = {};

          instance.getLiveRates(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOHLCByTimeframe', function() {
        it('should call getOHLCByTimeframe successfully', function(done) {
          // TODO: uncomment, update parameter values for getOHLCByTimeframe call and complete the assertions
          /*

          instance.getOHLCByTimeframe(currency, from, to, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPerformance', function() {
        it('should call getPerformance successfully', function(done) {
          // TODO: uncomment, update parameter values for getPerformance call and complete the assertions
          /*

          instance.getPerformance(symbol, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRatesBySource', function() {
        it('should call getRatesBySource successfully', function(done) {
          // TODO: uncomment, update parameter values for getRatesBySource call and complete the assertions
          /*

          instance.getRatesBySource(source, target, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2002);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTechnicalAnalysis', function() {
        it('should call getTechnicalAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for getTechnicalAnalysis call and complete the assertions
          /*
          var opts = {};

          instance.getTechnicalAnalysis(symbol, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CurrencydatafeedcomApiV2.InlineResponse2009);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
